
/////////////////
// Plain SASS Trigonometry Algorithm in Taylor Expansion //
//                                                       //
// Based on                                              //
//      http://japborst.net/posts/sass-sines-and-cosines //
///////////////////////////////////////////////////////////

$pi: 3.14159265359;
$_precision: 10;

@function pow($base, $exp) {
  $value: $base;
  @if $exp > 1 {
    @for $i from 2 through $exp {
      $value: $value * $base;
    }
  }
  @if $exp < 1{
    @for $i from 0 through -$exp {
      $value: $value / $base;
    }
  }
  @return $value;
}

@function fact($num) {
  $fact: 1;
  @if $num > 0{
    @for $i from 1 through $num {
      $fact: $fact * $i;
    }
  }
  @return $fact;
}

@function _to_unitless_rad($angle) {
  @if unit($angle) == "deg" {
    $angle: $angle / 180deg * $pi;
  }
  @if unit($angle) == "rad" {
    $angle: $angle / 1rad;
  }
  @return $angle;
}

@function sin($angle){
  $a: _to_unitless_rad($angle);
  $sin: $a;
  @for $n from 1 through $_precision {
    $sin: $sin + (pow(-1, $n) / fact(2 * $n + 1) ) * pow($a, (2 * $n + 1));
  }
  @return $sin;
}

@function cos($angle){
  $a: _to_unitless_rad($angle);
  $cos: 1;
  @for $n from 1 through $_precision {
    $cos: $cos + ( pow(-1,$n) / fact(2*$n) ) * pow($a,2*$n);
  }
  @return $cos;
}

@function tan($angle){
  @return sin($angle) / cos($angle);
}

@mixin draw-hex($main-radius: 26%, $rounding-radius: 12%, $rotated: true, $precision:20 ){
	display: flex;
	padding: 0;
	margin: 0;
	position: absolute;
	top: 0;
	left: -3px;
	width: 114%;
	height: 102%;
	@include rounded-hex($main-radius, $rounding-radius, $rotated, $precision);
}
@mixin rounded-hex($main-radius: 26%, $rounding-radius: 12%, $rotated: true, $precision:20 ) {
	$n: 6;
	$central-angle: 360deg/$n;
	$angle: ($n - 2)*180deg/$n;
	$max-var-angle: 2*(90deg - $angle/2);
	// $precision: 6;
	$unit-var-angle: $max-var-angle/$precision;
	
	$r-diff: $main-radius + $rounding-radius;

	$points: ();

	@for $i from 0 to $n {
		$vertex-angle: $i*$central-angle +
			if($rotated, -90deg, 0deg);
		$vertex-x: 50% + $r-diff*cos($vertex-angle);
		$vertex-y: 50% + $r-diff*sin($vertex-angle);

		@for $j from 0 through $precision {
			$curr-angle: $vertex-angle + 
				($j - .5*$precision)*$unit-var-angle;
			$x: $vertex-x + 
				$rounding-radius*cos($curr-angle);
			$y: $vertex-y + 
				$rounding-radius*sin($curr-angle);

			$points: $points, $x $y;
		}
	}
	
	clip-path: polygon($points);
}