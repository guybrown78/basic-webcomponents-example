/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface TfA {
        "colour": string;
        "tagTitle": string;
        "target": string;
        "textAlign": string;
        "underlined": boolean;
        "url": string;
    }
    interface TfATag {
        "tagTitle": string;
        "url": string;
    }
    interface TfAlert {
        "alertId": string;
        "autoOpen": boolean;
        "autoOpenDelay": number;
        "buttonColour": string;
        "buttonSize": string;
        "buttonTitle": string;
        "colour": string;
        "icon": string;
        "message": string;
        "open": () => Promise<void>;
        "opened": boolean;
        "showButton": boolean;
        "showDuration": number;
    }
    interface TfAlerts {
    }
    interface TfAppBaseFooter {
    }
    interface TfAppBaseHeader {
        "appInitials": string;
        "appTitle": string;
        "clientLogoSource": string;
        "isLogoClickable": boolean;
        "showAppLogo": boolean;
        "showClientLogo": boolean;
        "showUserAccount": boolean;
        "userAccountMenuItems": any;
    }
    interface TfAppClientLogo {
        "clientLogoSource": string;
        "showUserAccount": boolean;
    }
    interface TfAppHeader {
        "appInitials": string;
        "appTitle": string;
        "clientLogoSource": string;
    }
    interface TfBreadcrumb {
        "hrefLink": string;
        "hrefTitle": string;
        "routerLink": string;
        "showChevron": boolean;
    }
    interface TfBreadcrumbs {
        "backButtonColour": string;
        "showBackButton": boolean;
    }
    interface TfButton {
        "buttonId": string;
        "buttonType": string;
        "colour": string;
        "disabled": boolean;
        "icon": any;
        "iconPosition": string;
        "size": string;
    }
    interface TfButtonContainer {
        "size": string;
    }
    interface TfCard {
        "colour": string;
        "padding": string;
    }
    interface TfCardContainer {
        "colour": string;
    }
    interface TfCardContent {
    }
    interface TfCardPanel {
        "colour": string;
        "padding": string;
        "shouldWrap": boolean;
    }
    interface TfCardTitle {
        "colour": string;
    }
    interface TfCheckbox {
        "checked": boolean;
        "error": boolean;
        "errorMessage": string;
        "getChecked": () => Promise<boolean>;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "label": string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface TfClientLogo {
        "clientLogoSource": string;
        "showClientLogo": boolean;
        "showUserAccount": boolean;
        "userAccountMenuItems": any;
    }
    interface TfContainedCard {
        "colour": string;
    }
    interface TfDivider {
    }
    interface TfDropdown {
        "colour": string;
        "disabled": boolean;
        "displayTitle": string;
        "dropdownId": any;
        "position": string;
        "size": string;
    }
    interface TfDropdownLink {
        "colour": string;
        "hrefLink": string;
        "hrefTarget": string;
        "hrefTitle": string;
        "routerLink": string;
    }
    interface TfDropdownOption {
    }
    interface TfDropdownOptions {
    }
    interface TfDropdownRenderedOption {
        "colour": string;
        "elementTitle": string;
        "parent": string;
        "value": string;
    }
    interface TfFlex {
        "fillHeight": boolean;
        "fillWidth": boolean;
        "fx": string;
        "layout": string;
        "layoutAlign": string;
    }
    interface TfFormCard {
    }
    interface TfFormErrorItem {
    }
    interface TfFormErrors {
        "hide": boolean;
        "message": string;
    }
    interface TfFormTitle {
    }
    interface TfFormWrapper {
    }
    interface TfH1 {
        "colour": string;
        "textAlign": string;
    }
    interface TfH2 {
        "colour": string;
        "textAlign": string;
    }
    interface TfHexagon {
        "asButton": boolean;
        "color": string;
    }
    interface TfHexagonButton {
        "buttonId": string;
        "buttonType": string;
        "color": string;
        "disabled": boolean;
    }
    interface TfHexagonSvg {
        "color": string;
        "height": number;
        "size": string;
        "width": number;
    }
    interface TfIconAdd {
    }
    interface TfIconArrowDown {
    }
    interface TfIconArrowLeft {
    }
    interface TfIconArrowRight {
    }
    interface TfIconArrowUp {
    }
    interface TfIconButton {
        "buttonId": string;
        "buttonType": string;
        "colour": string;
        "disabled": boolean;
        "icon": any;
        "outlineColour": any;
        "size": string;
    }
    interface TfIconCalendar {
    }
    interface TfIconCheck {
    }
    interface TfIconChevronDown {
    }
    interface TfIconChevronLeft {
    }
    interface TfIconChevronRight {
    }
    interface TfIconChevronUp {
    }
    interface TfIconClose {
    }
    interface TfIconEnvelope {
    }
    interface TfIconExclamation {
    }
    interface TfIconFolder {
    }
    interface TfIconHexagon {
        "colour": string;
        "icon": any;
        "outlineColour": any;
        "size": string;
    }
    interface TfIconHexagonOutline {
    }
    interface TfIconLocked {
    }
    interface TfIconMinus {
    }
    interface TfIconNotification {
    }
    interface TfIconProductOutline {
        "colour": string;
        "initials": any;
        "size": string;
    }
    interface TfIconSearch {
    }
    interface TfIconSettings {
    }
    interface TfIconTag {
    }
    interface TfIconUnlocked {
    }
    interface TfIconUser {
    }
    interface TfInfoCard {
        "colour": string;
        "footerBorder": string;
        "showFooter": boolean;
        "tabColour": string;
    }
    interface TfInfoPanel {
        "colour": string;
        "padding": string;
    }
    interface TfInput {
        "autoComplete": string;
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "icon": string;
        "iconPosition": string;
        "inputType": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface TfLeadingIconLabel {
        "contentAlign": string;
        "order": number;
    }
    interface TfList {
    }
    interface TfListItem {
    }
    interface TfListWrappingCell {
        "contentAlign": string;
        "order": number;
    }
    interface TfListWrappingItem {
    }
    interface TfLmsDelegateNode {
        "courseCode": string;
        "courseTitle": string;
        "delegateCoursesCount": number;
        "delegateDob": string;
        "delegateId": string;
        "delegateName": string;
        "delegateStatus": string;
    }
    interface TfLoginForm {
        "apiEndpoint": string;
        "apiHeaders": any;
        "apiMethod": string;
        "bodyPropEmail": string;
        "bodyPropPassword": string;
        "forgottenUrl": string;
    }
    interface TfMainContent {
    }
    interface TfMenuBar {
    }
    interface TfModal {
        "cancelColour": string;
        "cancelText": string;
        "confirmColour": string;
        "confirmText": string;
        "displayTitle": string;
        "headerStyle": string;
        "open": () => Promise<void>;
        "opened": boolean;
        "showCancel": boolean;
        "showClose": boolean;
        "showConfirm": boolean;
    }
    interface TfModal2 {
        "displayTitle": string;
    }
    interface TfNode {
    }
    interface TfNodeFlex {
    }
    interface TfNodeFlexFxr {
        "rWidth": string;
    }
    interface TfNodeFxlFlex {
        "lWidth": string;
    }
    interface TfNodeFxlFlexFxr {
        "lWidth": string;
        "rWidth": string;
    }
    interface TfNodeHeader {
    }
    interface TfNodeHeaderTitle {
        "justify": string;
    }
    interface TfNodeList {
    }
    interface TfNodeRow {
        "mobileWrap": boolean;
    }
    interface TfNodeRowCell {
        "cWidth": string;
        "layoutAlign": string;
    }
    interface TfNodeRowCellH5 {
    }
    interface TfNodeRowHeader {
        "mobileHide": boolean;
    }
    interface TfNodeSelectMenu {
    }
    interface TfNodeStatusBookend {
        "color": string;
        "showTooltip": boolean;
    }
    interface TfNodeText {
        "justify": string;
    }
    interface TfP {
        "colour": string;
        "textAlign": string;
    }
    interface TfPTag {
        "tagTitle": string;
        "textAlign": string;
        "url": string;
    }
    interface TfPageMessage {
    }
    interface TfPageTitle {
    }
    interface TfPageTitleBreadcrumbs {
        "backButtonColour": string;
        "showBackButton": boolean;
    }
    interface TfPhOverviewButton {
        "cardTitle": string;
        "isActive": boolean;
        "marketingCtaAsButton": boolean;
        "productCode": string;
        "productCta": string;
        "productDescription": string;
        "productId": string;
        "productInitials": string;
        "productTitle": string;
    }
    interface TfProductLogo {
        "asOutline": boolean;
        "code": string;
        "colour": string;
        "initials": string;
        "initialsColour": string;
        "size": string;
    }
    interface TfQuickLinks {
        "disabled": boolean;
        "dropdownId": any;
    }
    interface TfRadio {
        "checked": boolean;
        "error": boolean;
        "errorMessage": string;
        "getChecked": () => Promise<boolean>;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "groupName": string;
        "hideLabel": boolean;
        "hint": string;
        "label": string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface TfRadioGroup {
        "description": string;
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "groupName": string;
        "hideLabel": boolean;
        "hint": string;
        "label": string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface TfSearch {
        "autoComplete": string;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "inputType": string;
        "name": string;
        "placeholder": string;
        "value": string;
    }
    interface TfSelect {
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLSelectElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "icon": string;
        "iconPosition": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface TfSelectOption {
    }
    interface TfSideDrawer {
        "displayTitle": string;
        "open": () => Promise<void>;
        "opened": boolean;
    }
    interface TfSideDrawerNav {
    }
    interface TfSideDrawerNavLink {
        "hrefLink": string;
        "hrefTitle": string;
        "routerLink": string;
    }
    interface TfSideDrawerSubNav {
    }
    interface TfSideDrawerSubNavLink {
        "hrefLink": string;
        "hrefTitle": string;
        "routerLink": string;
    }
    interface TfSpanBold {
        "colour": string;
        "textAlign": string;
    }
    interface TfSpanDescription {
        "colour": string;
        "textAlign": string;
    }
    interface TfSpanItalic {
        "colour": string;
        "textAlign": string;
    }
    interface TfSpanItalicBold {
        "colour": string;
        "textAlign": string;
    }
    interface TfSpanNormal {
        "colour": string;
        "textAlign": string;
    }
    interface TfSpanTitle {
        "colour": string;
        "textAlign": string;
    }
    interface TfSpinner {
    }
    interface TfStatDataCard {
        "colour": string;
    }
    interface TfStatsPanel {
    }
    interface TfStatus {
        "trafficLightColour": string;
    }
    interface TfStatusBeacon {
        "trafficLightColour": string;
    }
    interface TfTable {
    }
    interface TfTableCell {
        "textAlign": string;
    }
    interface TfTableHead {
    }
    interface TfTableHeadCell {
    }
    interface TfTableRow {
    }
    interface TfTableScrollingContainer {
    }
    interface TfTest {
    }
    interface TfTextarea {
        "autoComplete": string;
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLTextAreaElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "icon": string;
        "iconPosition": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "rowCount": number;
        "value": string;
    }
    interface TfTransformTagline {
    }
    interface TfUser {
    }
    interface TfValuePair {
    }
}
declare global {
    interface HTMLTfAElement extends Components.TfA, HTMLStencilElement {
    }
    var HTMLTfAElement: {
        prototype: HTMLTfAElement;
        new (): HTMLTfAElement;
    };
    interface HTMLTfATagElement extends Components.TfATag, HTMLStencilElement {
    }
    var HTMLTfATagElement: {
        prototype: HTMLTfATagElement;
        new (): HTMLTfATagElement;
    };
    interface HTMLTfAlertElement extends Components.TfAlert, HTMLStencilElement {
    }
    var HTMLTfAlertElement: {
        prototype: HTMLTfAlertElement;
        new (): HTMLTfAlertElement;
    };
    interface HTMLTfAlertsElement extends Components.TfAlerts, HTMLStencilElement {
    }
    var HTMLTfAlertsElement: {
        prototype: HTMLTfAlertsElement;
        new (): HTMLTfAlertsElement;
    };
    interface HTMLTfAppBaseFooterElement extends Components.TfAppBaseFooter, HTMLStencilElement {
    }
    var HTMLTfAppBaseFooterElement: {
        prototype: HTMLTfAppBaseFooterElement;
        new (): HTMLTfAppBaseFooterElement;
    };
    interface HTMLTfAppBaseHeaderElement extends Components.TfAppBaseHeader, HTMLStencilElement {
    }
    var HTMLTfAppBaseHeaderElement: {
        prototype: HTMLTfAppBaseHeaderElement;
        new (): HTMLTfAppBaseHeaderElement;
    };
    interface HTMLTfAppClientLogoElement extends Components.TfAppClientLogo, HTMLStencilElement {
    }
    var HTMLTfAppClientLogoElement: {
        prototype: HTMLTfAppClientLogoElement;
        new (): HTMLTfAppClientLogoElement;
    };
    interface HTMLTfAppHeaderElement extends Components.TfAppHeader, HTMLStencilElement {
    }
    var HTMLTfAppHeaderElement: {
        prototype: HTMLTfAppHeaderElement;
        new (): HTMLTfAppHeaderElement;
    };
    interface HTMLTfBreadcrumbElement extends Components.TfBreadcrumb, HTMLStencilElement {
    }
    var HTMLTfBreadcrumbElement: {
        prototype: HTMLTfBreadcrumbElement;
        new (): HTMLTfBreadcrumbElement;
    };
    interface HTMLTfBreadcrumbsElement extends Components.TfBreadcrumbs, HTMLStencilElement {
    }
    var HTMLTfBreadcrumbsElement: {
        prototype: HTMLTfBreadcrumbsElement;
        new (): HTMLTfBreadcrumbsElement;
    };
    interface HTMLTfButtonElement extends Components.TfButton, HTMLStencilElement {
    }
    var HTMLTfButtonElement: {
        prototype: HTMLTfButtonElement;
        new (): HTMLTfButtonElement;
    };
    interface HTMLTfButtonContainerElement extends Components.TfButtonContainer, HTMLStencilElement {
    }
    var HTMLTfButtonContainerElement: {
        prototype: HTMLTfButtonContainerElement;
        new (): HTMLTfButtonContainerElement;
    };
    interface HTMLTfCardElement extends Components.TfCard, HTMLStencilElement {
    }
    var HTMLTfCardElement: {
        prototype: HTMLTfCardElement;
        new (): HTMLTfCardElement;
    };
    interface HTMLTfCardContainerElement extends Components.TfCardContainer, HTMLStencilElement {
    }
    var HTMLTfCardContainerElement: {
        prototype: HTMLTfCardContainerElement;
        new (): HTMLTfCardContainerElement;
    };
    interface HTMLTfCardContentElement extends Components.TfCardContent, HTMLStencilElement {
    }
    var HTMLTfCardContentElement: {
        prototype: HTMLTfCardContentElement;
        new (): HTMLTfCardContentElement;
    };
    interface HTMLTfCardPanelElement extends Components.TfCardPanel, HTMLStencilElement {
    }
    var HTMLTfCardPanelElement: {
        prototype: HTMLTfCardPanelElement;
        new (): HTMLTfCardPanelElement;
    };
    interface HTMLTfCardTitleElement extends Components.TfCardTitle, HTMLStencilElement {
    }
    var HTMLTfCardTitleElement: {
        prototype: HTMLTfCardTitleElement;
        new (): HTMLTfCardTitleElement;
    };
    interface HTMLTfCheckboxElement extends Components.TfCheckbox, HTMLStencilElement {
    }
    var HTMLTfCheckboxElement: {
        prototype: HTMLTfCheckboxElement;
        new (): HTMLTfCheckboxElement;
    };
    interface HTMLTfClientLogoElement extends Components.TfClientLogo, HTMLStencilElement {
    }
    var HTMLTfClientLogoElement: {
        prototype: HTMLTfClientLogoElement;
        new (): HTMLTfClientLogoElement;
    };
    interface HTMLTfContainedCardElement extends Components.TfContainedCard, HTMLStencilElement {
    }
    var HTMLTfContainedCardElement: {
        prototype: HTMLTfContainedCardElement;
        new (): HTMLTfContainedCardElement;
    };
    interface HTMLTfDividerElement extends Components.TfDivider, HTMLStencilElement {
    }
    var HTMLTfDividerElement: {
        prototype: HTMLTfDividerElement;
        new (): HTMLTfDividerElement;
    };
    interface HTMLTfDropdownElement extends Components.TfDropdown, HTMLStencilElement {
    }
    var HTMLTfDropdownElement: {
        prototype: HTMLTfDropdownElement;
        new (): HTMLTfDropdownElement;
    };
    interface HTMLTfDropdownLinkElement extends Components.TfDropdownLink, HTMLStencilElement {
    }
    var HTMLTfDropdownLinkElement: {
        prototype: HTMLTfDropdownLinkElement;
        new (): HTMLTfDropdownLinkElement;
    };
    interface HTMLTfDropdownOptionElement extends Components.TfDropdownOption, HTMLStencilElement {
    }
    var HTMLTfDropdownOptionElement: {
        prototype: HTMLTfDropdownOptionElement;
        new (): HTMLTfDropdownOptionElement;
    };
    interface HTMLTfDropdownOptionsElement extends Components.TfDropdownOptions, HTMLStencilElement {
    }
    var HTMLTfDropdownOptionsElement: {
        prototype: HTMLTfDropdownOptionsElement;
        new (): HTMLTfDropdownOptionsElement;
    };
    interface HTMLTfDropdownRenderedOptionElement extends Components.TfDropdownRenderedOption, HTMLStencilElement {
    }
    var HTMLTfDropdownRenderedOptionElement: {
        prototype: HTMLTfDropdownRenderedOptionElement;
        new (): HTMLTfDropdownRenderedOptionElement;
    };
    interface HTMLTfFlexElement extends Components.TfFlex, HTMLStencilElement {
    }
    var HTMLTfFlexElement: {
        prototype: HTMLTfFlexElement;
        new (): HTMLTfFlexElement;
    };
    interface HTMLTfFormCardElement extends Components.TfFormCard, HTMLStencilElement {
    }
    var HTMLTfFormCardElement: {
        prototype: HTMLTfFormCardElement;
        new (): HTMLTfFormCardElement;
    };
    interface HTMLTfFormErrorItemElement extends Components.TfFormErrorItem, HTMLStencilElement {
    }
    var HTMLTfFormErrorItemElement: {
        prototype: HTMLTfFormErrorItemElement;
        new (): HTMLTfFormErrorItemElement;
    };
    interface HTMLTfFormErrorsElement extends Components.TfFormErrors, HTMLStencilElement {
    }
    var HTMLTfFormErrorsElement: {
        prototype: HTMLTfFormErrorsElement;
        new (): HTMLTfFormErrorsElement;
    };
    interface HTMLTfFormTitleElement extends Components.TfFormTitle, HTMLStencilElement {
    }
    var HTMLTfFormTitleElement: {
        prototype: HTMLTfFormTitleElement;
        new (): HTMLTfFormTitleElement;
    };
    interface HTMLTfFormWrapperElement extends Components.TfFormWrapper, HTMLStencilElement {
    }
    var HTMLTfFormWrapperElement: {
        prototype: HTMLTfFormWrapperElement;
        new (): HTMLTfFormWrapperElement;
    };
    interface HTMLTfH1Element extends Components.TfH1, HTMLStencilElement {
    }
    var HTMLTfH1Element: {
        prototype: HTMLTfH1Element;
        new (): HTMLTfH1Element;
    };
    interface HTMLTfH2Element extends Components.TfH2, HTMLStencilElement {
    }
    var HTMLTfH2Element: {
        prototype: HTMLTfH2Element;
        new (): HTMLTfH2Element;
    };
    interface HTMLTfHexagonElement extends Components.TfHexagon, HTMLStencilElement {
    }
    var HTMLTfHexagonElement: {
        prototype: HTMLTfHexagonElement;
        new (): HTMLTfHexagonElement;
    };
    interface HTMLTfHexagonButtonElement extends Components.TfHexagonButton, HTMLStencilElement {
    }
    var HTMLTfHexagonButtonElement: {
        prototype: HTMLTfHexagonButtonElement;
        new (): HTMLTfHexagonButtonElement;
    };
    interface HTMLTfHexagonSvgElement extends Components.TfHexagonSvg, HTMLStencilElement {
    }
    var HTMLTfHexagonSvgElement: {
        prototype: HTMLTfHexagonSvgElement;
        new (): HTMLTfHexagonSvgElement;
    };
    interface HTMLTfIconAddElement extends Components.TfIconAdd, HTMLStencilElement {
    }
    var HTMLTfIconAddElement: {
        prototype: HTMLTfIconAddElement;
        new (): HTMLTfIconAddElement;
    };
    interface HTMLTfIconArrowDownElement extends Components.TfIconArrowDown, HTMLStencilElement {
    }
    var HTMLTfIconArrowDownElement: {
        prototype: HTMLTfIconArrowDownElement;
        new (): HTMLTfIconArrowDownElement;
    };
    interface HTMLTfIconArrowLeftElement extends Components.TfIconArrowLeft, HTMLStencilElement {
    }
    var HTMLTfIconArrowLeftElement: {
        prototype: HTMLTfIconArrowLeftElement;
        new (): HTMLTfIconArrowLeftElement;
    };
    interface HTMLTfIconArrowRightElement extends Components.TfIconArrowRight, HTMLStencilElement {
    }
    var HTMLTfIconArrowRightElement: {
        prototype: HTMLTfIconArrowRightElement;
        new (): HTMLTfIconArrowRightElement;
    };
    interface HTMLTfIconArrowUpElement extends Components.TfIconArrowUp, HTMLStencilElement {
    }
    var HTMLTfIconArrowUpElement: {
        prototype: HTMLTfIconArrowUpElement;
        new (): HTMLTfIconArrowUpElement;
    };
    interface HTMLTfIconButtonElement extends Components.TfIconButton, HTMLStencilElement {
    }
    var HTMLTfIconButtonElement: {
        prototype: HTMLTfIconButtonElement;
        new (): HTMLTfIconButtonElement;
    };
    interface HTMLTfIconCalendarElement extends Components.TfIconCalendar, HTMLStencilElement {
    }
    var HTMLTfIconCalendarElement: {
        prototype: HTMLTfIconCalendarElement;
        new (): HTMLTfIconCalendarElement;
    };
    interface HTMLTfIconCheckElement extends Components.TfIconCheck, HTMLStencilElement {
    }
    var HTMLTfIconCheckElement: {
        prototype: HTMLTfIconCheckElement;
        new (): HTMLTfIconCheckElement;
    };
    interface HTMLTfIconChevronDownElement extends Components.TfIconChevronDown, HTMLStencilElement {
    }
    var HTMLTfIconChevronDownElement: {
        prototype: HTMLTfIconChevronDownElement;
        new (): HTMLTfIconChevronDownElement;
    };
    interface HTMLTfIconChevronLeftElement extends Components.TfIconChevronLeft, HTMLStencilElement {
    }
    var HTMLTfIconChevronLeftElement: {
        prototype: HTMLTfIconChevronLeftElement;
        new (): HTMLTfIconChevronLeftElement;
    };
    interface HTMLTfIconChevronRightElement extends Components.TfIconChevronRight, HTMLStencilElement {
    }
    var HTMLTfIconChevronRightElement: {
        prototype: HTMLTfIconChevronRightElement;
        new (): HTMLTfIconChevronRightElement;
    };
    interface HTMLTfIconChevronUpElement extends Components.TfIconChevronUp, HTMLStencilElement {
    }
    var HTMLTfIconChevronUpElement: {
        prototype: HTMLTfIconChevronUpElement;
        new (): HTMLTfIconChevronUpElement;
    };
    interface HTMLTfIconCloseElement extends Components.TfIconClose, HTMLStencilElement {
    }
    var HTMLTfIconCloseElement: {
        prototype: HTMLTfIconCloseElement;
        new (): HTMLTfIconCloseElement;
    };
    interface HTMLTfIconEnvelopeElement extends Components.TfIconEnvelope, HTMLStencilElement {
    }
    var HTMLTfIconEnvelopeElement: {
        prototype: HTMLTfIconEnvelopeElement;
        new (): HTMLTfIconEnvelopeElement;
    };
    interface HTMLTfIconExclamationElement extends Components.TfIconExclamation, HTMLStencilElement {
    }
    var HTMLTfIconExclamationElement: {
        prototype: HTMLTfIconExclamationElement;
        new (): HTMLTfIconExclamationElement;
    };
    interface HTMLTfIconFolderElement extends Components.TfIconFolder, HTMLStencilElement {
    }
    var HTMLTfIconFolderElement: {
        prototype: HTMLTfIconFolderElement;
        new (): HTMLTfIconFolderElement;
    };
    interface HTMLTfIconHexagonElement extends Components.TfIconHexagon, HTMLStencilElement {
    }
    var HTMLTfIconHexagonElement: {
        prototype: HTMLTfIconHexagonElement;
        new (): HTMLTfIconHexagonElement;
    };
    interface HTMLTfIconHexagonOutlineElement extends Components.TfIconHexagonOutline, HTMLStencilElement {
    }
    var HTMLTfIconHexagonOutlineElement: {
        prototype: HTMLTfIconHexagonOutlineElement;
        new (): HTMLTfIconHexagonOutlineElement;
    };
    interface HTMLTfIconLockedElement extends Components.TfIconLocked, HTMLStencilElement {
    }
    var HTMLTfIconLockedElement: {
        prototype: HTMLTfIconLockedElement;
        new (): HTMLTfIconLockedElement;
    };
    interface HTMLTfIconMinusElement extends Components.TfIconMinus, HTMLStencilElement {
    }
    var HTMLTfIconMinusElement: {
        prototype: HTMLTfIconMinusElement;
        new (): HTMLTfIconMinusElement;
    };
    interface HTMLTfIconNotificationElement extends Components.TfIconNotification, HTMLStencilElement {
    }
    var HTMLTfIconNotificationElement: {
        prototype: HTMLTfIconNotificationElement;
        new (): HTMLTfIconNotificationElement;
    };
    interface HTMLTfIconProductOutlineElement extends Components.TfIconProductOutline, HTMLStencilElement {
    }
    var HTMLTfIconProductOutlineElement: {
        prototype: HTMLTfIconProductOutlineElement;
        new (): HTMLTfIconProductOutlineElement;
    };
    interface HTMLTfIconSearchElement extends Components.TfIconSearch, HTMLStencilElement {
    }
    var HTMLTfIconSearchElement: {
        prototype: HTMLTfIconSearchElement;
        new (): HTMLTfIconSearchElement;
    };
    interface HTMLTfIconSettingsElement extends Components.TfIconSettings, HTMLStencilElement {
    }
    var HTMLTfIconSettingsElement: {
        prototype: HTMLTfIconSettingsElement;
        new (): HTMLTfIconSettingsElement;
    };
    interface HTMLTfIconTagElement extends Components.TfIconTag, HTMLStencilElement {
    }
    var HTMLTfIconTagElement: {
        prototype: HTMLTfIconTagElement;
        new (): HTMLTfIconTagElement;
    };
    interface HTMLTfIconUnlockedElement extends Components.TfIconUnlocked, HTMLStencilElement {
    }
    var HTMLTfIconUnlockedElement: {
        prototype: HTMLTfIconUnlockedElement;
        new (): HTMLTfIconUnlockedElement;
    };
    interface HTMLTfIconUserElement extends Components.TfIconUser, HTMLStencilElement {
    }
    var HTMLTfIconUserElement: {
        prototype: HTMLTfIconUserElement;
        new (): HTMLTfIconUserElement;
    };
    interface HTMLTfInfoCardElement extends Components.TfInfoCard, HTMLStencilElement {
    }
    var HTMLTfInfoCardElement: {
        prototype: HTMLTfInfoCardElement;
        new (): HTMLTfInfoCardElement;
    };
    interface HTMLTfInfoPanelElement extends Components.TfInfoPanel, HTMLStencilElement {
    }
    var HTMLTfInfoPanelElement: {
        prototype: HTMLTfInfoPanelElement;
        new (): HTMLTfInfoPanelElement;
    };
    interface HTMLTfInputElement extends Components.TfInput, HTMLStencilElement {
    }
    var HTMLTfInputElement: {
        prototype: HTMLTfInputElement;
        new (): HTMLTfInputElement;
    };
    interface HTMLTfLeadingIconLabelElement extends Components.TfLeadingIconLabel, HTMLStencilElement {
    }
    var HTMLTfLeadingIconLabelElement: {
        prototype: HTMLTfLeadingIconLabelElement;
        new (): HTMLTfLeadingIconLabelElement;
    };
    interface HTMLTfListElement extends Components.TfList, HTMLStencilElement {
    }
    var HTMLTfListElement: {
        prototype: HTMLTfListElement;
        new (): HTMLTfListElement;
    };
    interface HTMLTfListItemElement extends Components.TfListItem, HTMLStencilElement {
    }
    var HTMLTfListItemElement: {
        prototype: HTMLTfListItemElement;
        new (): HTMLTfListItemElement;
    };
    interface HTMLTfListWrappingCellElement extends Components.TfListWrappingCell, HTMLStencilElement {
    }
    var HTMLTfListWrappingCellElement: {
        prototype: HTMLTfListWrappingCellElement;
        new (): HTMLTfListWrappingCellElement;
    };
    interface HTMLTfListWrappingItemElement extends Components.TfListWrappingItem, HTMLStencilElement {
    }
    var HTMLTfListWrappingItemElement: {
        prototype: HTMLTfListWrappingItemElement;
        new (): HTMLTfListWrappingItemElement;
    };
    interface HTMLTfLmsDelegateNodeElement extends Components.TfLmsDelegateNode, HTMLStencilElement {
    }
    var HTMLTfLmsDelegateNodeElement: {
        prototype: HTMLTfLmsDelegateNodeElement;
        new (): HTMLTfLmsDelegateNodeElement;
    };
    interface HTMLTfLoginFormElement extends Components.TfLoginForm, HTMLStencilElement {
    }
    var HTMLTfLoginFormElement: {
        prototype: HTMLTfLoginFormElement;
        new (): HTMLTfLoginFormElement;
    };
    interface HTMLTfMainContentElement extends Components.TfMainContent, HTMLStencilElement {
    }
    var HTMLTfMainContentElement: {
        prototype: HTMLTfMainContentElement;
        new (): HTMLTfMainContentElement;
    };
    interface HTMLTfMenuBarElement extends Components.TfMenuBar, HTMLStencilElement {
    }
    var HTMLTfMenuBarElement: {
        prototype: HTMLTfMenuBarElement;
        new (): HTMLTfMenuBarElement;
    };
    interface HTMLTfModalElement extends Components.TfModal, HTMLStencilElement {
    }
    var HTMLTfModalElement: {
        prototype: HTMLTfModalElement;
        new (): HTMLTfModalElement;
    };
    interface HTMLTfModal2Element extends Components.TfModal2, HTMLStencilElement {
    }
    var HTMLTfModal2Element: {
        prototype: HTMLTfModal2Element;
        new (): HTMLTfModal2Element;
    };
    interface HTMLTfNodeElement extends Components.TfNode, HTMLStencilElement {
    }
    var HTMLTfNodeElement: {
        prototype: HTMLTfNodeElement;
        new (): HTMLTfNodeElement;
    };
    interface HTMLTfNodeFlexElement extends Components.TfNodeFlex, HTMLStencilElement {
    }
    var HTMLTfNodeFlexElement: {
        prototype: HTMLTfNodeFlexElement;
        new (): HTMLTfNodeFlexElement;
    };
    interface HTMLTfNodeFlexFxrElement extends Components.TfNodeFlexFxr, HTMLStencilElement {
    }
    var HTMLTfNodeFlexFxrElement: {
        prototype: HTMLTfNodeFlexFxrElement;
        new (): HTMLTfNodeFlexFxrElement;
    };
    interface HTMLTfNodeFxlFlexElement extends Components.TfNodeFxlFlex, HTMLStencilElement {
    }
    var HTMLTfNodeFxlFlexElement: {
        prototype: HTMLTfNodeFxlFlexElement;
        new (): HTMLTfNodeFxlFlexElement;
    };
    interface HTMLTfNodeFxlFlexFxrElement extends Components.TfNodeFxlFlexFxr, HTMLStencilElement {
    }
    var HTMLTfNodeFxlFlexFxrElement: {
        prototype: HTMLTfNodeFxlFlexFxrElement;
        new (): HTMLTfNodeFxlFlexFxrElement;
    };
    interface HTMLTfNodeHeaderElement extends Components.TfNodeHeader, HTMLStencilElement {
    }
    var HTMLTfNodeHeaderElement: {
        prototype: HTMLTfNodeHeaderElement;
        new (): HTMLTfNodeHeaderElement;
    };
    interface HTMLTfNodeHeaderTitleElement extends Components.TfNodeHeaderTitle, HTMLStencilElement {
    }
    var HTMLTfNodeHeaderTitleElement: {
        prototype: HTMLTfNodeHeaderTitleElement;
        new (): HTMLTfNodeHeaderTitleElement;
    };
    interface HTMLTfNodeListElement extends Components.TfNodeList, HTMLStencilElement {
    }
    var HTMLTfNodeListElement: {
        prototype: HTMLTfNodeListElement;
        new (): HTMLTfNodeListElement;
    };
    interface HTMLTfNodeRowElement extends Components.TfNodeRow, HTMLStencilElement {
    }
    var HTMLTfNodeRowElement: {
        prototype: HTMLTfNodeRowElement;
        new (): HTMLTfNodeRowElement;
    };
    interface HTMLTfNodeRowCellElement extends Components.TfNodeRowCell, HTMLStencilElement {
    }
    var HTMLTfNodeRowCellElement: {
        prototype: HTMLTfNodeRowCellElement;
        new (): HTMLTfNodeRowCellElement;
    };
    interface HTMLTfNodeRowCellH5Element extends Components.TfNodeRowCellH5, HTMLStencilElement {
    }
    var HTMLTfNodeRowCellH5Element: {
        prototype: HTMLTfNodeRowCellH5Element;
        new (): HTMLTfNodeRowCellH5Element;
    };
    interface HTMLTfNodeRowHeaderElement extends Components.TfNodeRowHeader, HTMLStencilElement {
    }
    var HTMLTfNodeRowHeaderElement: {
        prototype: HTMLTfNodeRowHeaderElement;
        new (): HTMLTfNodeRowHeaderElement;
    };
    interface HTMLTfNodeSelectMenuElement extends Components.TfNodeSelectMenu, HTMLStencilElement {
    }
    var HTMLTfNodeSelectMenuElement: {
        prototype: HTMLTfNodeSelectMenuElement;
        new (): HTMLTfNodeSelectMenuElement;
    };
    interface HTMLTfNodeStatusBookendElement extends Components.TfNodeStatusBookend, HTMLStencilElement {
    }
    var HTMLTfNodeStatusBookendElement: {
        prototype: HTMLTfNodeStatusBookendElement;
        new (): HTMLTfNodeStatusBookendElement;
    };
    interface HTMLTfNodeTextElement extends Components.TfNodeText, HTMLStencilElement {
    }
    var HTMLTfNodeTextElement: {
        prototype: HTMLTfNodeTextElement;
        new (): HTMLTfNodeTextElement;
    };
    interface HTMLTfPElement extends Components.TfP, HTMLStencilElement {
    }
    var HTMLTfPElement: {
        prototype: HTMLTfPElement;
        new (): HTMLTfPElement;
    };
    interface HTMLTfPTagElement extends Components.TfPTag, HTMLStencilElement {
    }
    var HTMLTfPTagElement: {
        prototype: HTMLTfPTagElement;
        new (): HTMLTfPTagElement;
    };
    interface HTMLTfPageMessageElement extends Components.TfPageMessage, HTMLStencilElement {
    }
    var HTMLTfPageMessageElement: {
        prototype: HTMLTfPageMessageElement;
        new (): HTMLTfPageMessageElement;
    };
    interface HTMLTfPageTitleElement extends Components.TfPageTitle, HTMLStencilElement {
    }
    var HTMLTfPageTitleElement: {
        prototype: HTMLTfPageTitleElement;
        new (): HTMLTfPageTitleElement;
    };
    interface HTMLTfPageTitleBreadcrumbsElement extends Components.TfPageTitleBreadcrumbs, HTMLStencilElement {
    }
    var HTMLTfPageTitleBreadcrumbsElement: {
        prototype: HTMLTfPageTitleBreadcrumbsElement;
        new (): HTMLTfPageTitleBreadcrumbsElement;
    };
    interface HTMLTfPhOverviewButtonElement extends Components.TfPhOverviewButton, HTMLStencilElement {
    }
    var HTMLTfPhOverviewButtonElement: {
        prototype: HTMLTfPhOverviewButtonElement;
        new (): HTMLTfPhOverviewButtonElement;
    };
    interface HTMLTfProductLogoElement extends Components.TfProductLogo, HTMLStencilElement {
    }
    var HTMLTfProductLogoElement: {
        prototype: HTMLTfProductLogoElement;
        new (): HTMLTfProductLogoElement;
    };
    interface HTMLTfQuickLinksElement extends Components.TfQuickLinks, HTMLStencilElement {
    }
    var HTMLTfQuickLinksElement: {
        prototype: HTMLTfQuickLinksElement;
        new (): HTMLTfQuickLinksElement;
    };
    interface HTMLTfRadioElement extends Components.TfRadio, HTMLStencilElement {
    }
    var HTMLTfRadioElement: {
        prototype: HTMLTfRadioElement;
        new (): HTMLTfRadioElement;
    };
    interface HTMLTfRadioGroupElement extends Components.TfRadioGroup, HTMLStencilElement {
    }
    var HTMLTfRadioGroupElement: {
        prototype: HTMLTfRadioGroupElement;
        new (): HTMLTfRadioGroupElement;
    };
    interface HTMLTfSearchElement extends Components.TfSearch, HTMLStencilElement {
    }
    var HTMLTfSearchElement: {
        prototype: HTMLTfSearchElement;
        new (): HTMLTfSearchElement;
    };
    interface HTMLTfSelectElement extends Components.TfSelect, HTMLStencilElement {
    }
    var HTMLTfSelectElement: {
        prototype: HTMLTfSelectElement;
        new (): HTMLTfSelectElement;
    };
    interface HTMLTfSelectOptionElement extends Components.TfSelectOption, HTMLStencilElement {
    }
    var HTMLTfSelectOptionElement: {
        prototype: HTMLTfSelectOptionElement;
        new (): HTMLTfSelectOptionElement;
    };
    interface HTMLTfSideDrawerElement extends Components.TfSideDrawer, HTMLStencilElement {
    }
    var HTMLTfSideDrawerElement: {
        prototype: HTMLTfSideDrawerElement;
        new (): HTMLTfSideDrawerElement;
    };
    interface HTMLTfSideDrawerNavElement extends Components.TfSideDrawerNav, HTMLStencilElement {
    }
    var HTMLTfSideDrawerNavElement: {
        prototype: HTMLTfSideDrawerNavElement;
        new (): HTMLTfSideDrawerNavElement;
    };
    interface HTMLTfSideDrawerNavLinkElement extends Components.TfSideDrawerNavLink, HTMLStencilElement {
    }
    var HTMLTfSideDrawerNavLinkElement: {
        prototype: HTMLTfSideDrawerNavLinkElement;
        new (): HTMLTfSideDrawerNavLinkElement;
    };
    interface HTMLTfSideDrawerSubNavElement extends Components.TfSideDrawerSubNav, HTMLStencilElement {
    }
    var HTMLTfSideDrawerSubNavElement: {
        prototype: HTMLTfSideDrawerSubNavElement;
        new (): HTMLTfSideDrawerSubNavElement;
    };
    interface HTMLTfSideDrawerSubNavLinkElement extends Components.TfSideDrawerSubNavLink, HTMLStencilElement {
    }
    var HTMLTfSideDrawerSubNavLinkElement: {
        prototype: HTMLTfSideDrawerSubNavLinkElement;
        new (): HTMLTfSideDrawerSubNavLinkElement;
    };
    interface HTMLTfSpanBoldElement extends Components.TfSpanBold, HTMLStencilElement {
    }
    var HTMLTfSpanBoldElement: {
        prototype: HTMLTfSpanBoldElement;
        new (): HTMLTfSpanBoldElement;
    };
    interface HTMLTfSpanDescriptionElement extends Components.TfSpanDescription, HTMLStencilElement {
    }
    var HTMLTfSpanDescriptionElement: {
        prototype: HTMLTfSpanDescriptionElement;
        new (): HTMLTfSpanDescriptionElement;
    };
    interface HTMLTfSpanItalicElement extends Components.TfSpanItalic, HTMLStencilElement {
    }
    var HTMLTfSpanItalicElement: {
        prototype: HTMLTfSpanItalicElement;
        new (): HTMLTfSpanItalicElement;
    };
    interface HTMLTfSpanItalicBoldElement extends Components.TfSpanItalicBold, HTMLStencilElement {
    }
    var HTMLTfSpanItalicBoldElement: {
        prototype: HTMLTfSpanItalicBoldElement;
        new (): HTMLTfSpanItalicBoldElement;
    };
    interface HTMLTfSpanNormalElement extends Components.TfSpanNormal, HTMLStencilElement {
    }
    var HTMLTfSpanNormalElement: {
        prototype: HTMLTfSpanNormalElement;
        new (): HTMLTfSpanNormalElement;
    };
    interface HTMLTfSpanTitleElement extends Components.TfSpanTitle, HTMLStencilElement {
    }
    var HTMLTfSpanTitleElement: {
        prototype: HTMLTfSpanTitleElement;
        new (): HTMLTfSpanTitleElement;
    };
    interface HTMLTfSpinnerElement extends Components.TfSpinner, HTMLStencilElement {
    }
    var HTMLTfSpinnerElement: {
        prototype: HTMLTfSpinnerElement;
        new (): HTMLTfSpinnerElement;
    };
    interface HTMLTfStatDataCardElement extends Components.TfStatDataCard, HTMLStencilElement {
    }
    var HTMLTfStatDataCardElement: {
        prototype: HTMLTfStatDataCardElement;
        new (): HTMLTfStatDataCardElement;
    };
    interface HTMLTfStatsPanelElement extends Components.TfStatsPanel, HTMLStencilElement {
    }
    var HTMLTfStatsPanelElement: {
        prototype: HTMLTfStatsPanelElement;
        new (): HTMLTfStatsPanelElement;
    };
    interface HTMLTfStatusElement extends Components.TfStatus, HTMLStencilElement {
    }
    var HTMLTfStatusElement: {
        prototype: HTMLTfStatusElement;
        new (): HTMLTfStatusElement;
    };
    interface HTMLTfStatusBeaconElement extends Components.TfStatusBeacon, HTMLStencilElement {
    }
    var HTMLTfStatusBeaconElement: {
        prototype: HTMLTfStatusBeaconElement;
        new (): HTMLTfStatusBeaconElement;
    };
    interface HTMLTfTableElement extends Components.TfTable, HTMLStencilElement {
    }
    var HTMLTfTableElement: {
        prototype: HTMLTfTableElement;
        new (): HTMLTfTableElement;
    };
    interface HTMLTfTableCellElement extends Components.TfTableCell, HTMLStencilElement {
    }
    var HTMLTfTableCellElement: {
        prototype: HTMLTfTableCellElement;
        new (): HTMLTfTableCellElement;
    };
    interface HTMLTfTableHeadElement extends Components.TfTableHead, HTMLStencilElement {
    }
    var HTMLTfTableHeadElement: {
        prototype: HTMLTfTableHeadElement;
        new (): HTMLTfTableHeadElement;
    };
    interface HTMLTfTableHeadCellElement extends Components.TfTableHeadCell, HTMLStencilElement {
    }
    var HTMLTfTableHeadCellElement: {
        prototype: HTMLTfTableHeadCellElement;
        new (): HTMLTfTableHeadCellElement;
    };
    interface HTMLTfTableRowElement extends Components.TfTableRow, HTMLStencilElement {
    }
    var HTMLTfTableRowElement: {
        prototype: HTMLTfTableRowElement;
        new (): HTMLTfTableRowElement;
    };
    interface HTMLTfTableScrollingContainerElement extends Components.TfTableScrollingContainer, HTMLStencilElement {
    }
    var HTMLTfTableScrollingContainerElement: {
        prototype: HTMLTfTableScrollingContainerElement;
        new (): HTMLTfTableScrollingContainerElement;
    };
    interface HTMLTfTestElement extends Components.TfTest, HTMLStencilElement {
    }
    var HTMLTfTestElement: {
        prototype: HTMLTfTestElement;
        new (): HTMLTfTestElement;
    };
    interface HTMLTfTextareaElement extends Components.TfTextarea, HTMLStencilElement {
    }
    var HTMLTfTextareaElement: {
        prototype: HTMLTfTextareaElement;
        new (): HTMLTfTextareaElement;
    };
    interface HTMLTfTransformTaglineElement extends Components.TfTransformTagline, HTMLStencilElement {
    }
    var HTMLTfTransformTaglineElement: {
        prototype: HTMLTfTransformTaglineElement;
        new (): HTMLTfTransformTaglineElement;
    };
    interface HTMLTfUserElement extends Components.TfUser, HTMLStencilElement {
    }
    var HTMLTfUserElement: {
        prototype: HTMLTfUserElement;
        new (): HTMLTfUserElement;
    };
    interface HTMLTfValuePairElement extends Components.TfValuePair, HTMLStencilElement {
    }
    var HTMLTfValuePairElement: {
        prototype: HTMLTfValuePairElement;
        new (): HTMLTfValuePairElement;
    };
    interface HTMLElementTagNameMap {
        "tf-a": HTMLTfAElement;
        "tf-a-tag": HTMLTfATagElement;
        "tf-alert": HTMLTfAlertElement;
        "tf-alerts": HTMLTfAlertsElement;
        "tf-app-base-footer": HTMLTfAppBaseFooterElement;
        "tf-app-base-header": HTMLTfAppBaseHeaderElement;
        "tf-app-client-logo": HTMLTfAppClientLogoElement;
        "tf-app-header": HTMLTfAppHeaderElement;
        "tf-breadcrumb": HTMLTfBreadcrumbElement;
        "tf-breadcrumbs": HTMLTfBreadcrumbsElement;
        "tf-button": HTMLTfButtonElement;
        "tf-button-container": HTMLTfButtonContainerElement;
        "tf-card": HTMLTfCardElement;
        "tf-card-container": HTMLTfCardContainerElement;
        "tf-card-content": HTMLTfCardContentElement;
        "tf-card-panel": HTMLTfCardPanelElement;
        "tf-card-title": HTMLTfCardTitleElement;
        "tf-checkbox": HTMLTfCheckboxElement;
        "tf-client-logo": HTMLTfClientLogoElement;
        "tf-contained-card": HTMLTfContainedCardElement;
        "tf-divider": HTMLTfDividerElement;
        "tf-dropdown": HTMLTfDropdownElement;
        "tf-dropdown-link": HTMLTfDropdownLinkElement;
        "tf-dropdown-option": HTMLTfDropdownOptionElement;
        "tf-dropdown-options": HTMLTfDropdownOptionsElement;
        "tf-dropdown-rendered-option": HTMLTfDropdownRenderedOptionElement;
        "tf-flex": HTMLTfFlexElement;
        "tf-form-card": HTMLTfFormCardElement;
        "tf-form-error-item": HTMLTfFormErrorItemElement;
        "tf-form-errors": HTMLTfFormErrorsElement;
        "tf-form-title": HTMLTfFormTitleElement;
        "tf-form-wrapper": HTMLTfFormWrapperElement;
        "tf-h1": HTMLTfH1Element;
        "tf-h2": HTMLTfH2Element;
        "tf-hexagon": HTMLTfHexagonElement;
        "tf-hexagon-button": HTMLTfHexagonButtonElement;
        "tf-hexagon-svg": HTMLTfHexagonSvgElement;
        "tf-icon-add": HTMLTfIconAddElement;
        "tf-icon-arrow-down": HTMLTfIconArrowDownElement;
        "tf-icon-arrow-left": HTMLTfIconArrowLeftElement;
        "tf-icon-arrow-right": HTMLTfIconArrowRightElement;
        "tf-icon-arrow-up": HTMLTfIconArrowUpElement;
        "tf-icon-button": HTMLTfIconButtonElement;
        "tf-icon-calendar": HTMLTfIconCalendarElement;
        "tf-icon-check": HTMLTfIconCheckElement;
        "tf-icon-chevron-down": HTMLTfIconChevronDownElement;
        "tf-icon-chevron-left": HTMLTfIconChevronLeftElement;
        "tf-icon-chevron-right": HTMLTfIconChevronRightElement;
        "tf-icon-chevron-up": HTMLTfIconChevronUpElement;
        "tf-icon-close": HTMLTfIconCloseElement;
        "tf-icon-envelope": HTMLTfIconEnvelopeElement;
        "tf-icon-exclamation": HTMLTfIconExclamationElement;
        "tf-icon-folder": HTMLTfIconFolderElement;
        "tf-icon-hexagon": HTMLTfIconHexagonElement;
        "tf-icon-hexagon-outline": HTMLTfIconHexagonOutlineElement;
        "tf-icon-locked": HTMLTfIconLockedElement;
        "tf-icon-minus": HTMLTfIconMinusElement;
        "tf-icon-notification": HTMLTfIconNotificationElement;
        "tf-icon-product-outline": HTMLTfIconProductOutlineElement;
        "tf-icon-search": HTMLTfIconSearchElement;
        "tf-icon-settings": HTMLTfIconSettingsElement;
        "tf-icon-tag": HTMLTfIconTagElement;
        "tf-icon-unlocked": HTMLTfIconUnlockedElement;
        "tf-icon-user": HTMLTfIconUserElement;
        "tf-info-card": HTMLTfInfoCardElement;
        "tf-info-panel": HTMLTfInfoPanelElement;
        "tf-input": HTMLTfInputElement;
        "tf-leading-icon-label": HTMLTfLeadingIconLabelElement;
        "tf-list": HTMLTfListElement;
        "tf-list-item": HTMLTfListItemElement;
        "tf-list-wrapping-cell": HTMLTfListWrappingCellElement;
        "tf-list-wrapping-item": HTMLTfListWrappingItemElement;
        "tf-lms-delegate-node": HTMLTfLmsDelegateNodeElement;
        "tf-login-form": HTMLTfLoginFormElement;
        "tf-main-content": HTMLTfMainContentElement;
        "tf-menu-bar": HTMLTfMenuBarElement;
        "tf-modal": HTMLTfModalElement;
        "tf-modal-2": HTMLTfModal2Element;
        "tf-node": HTMLTfNodeElement;
        "tf-node-flex": HTMLTfNodeFlexElement;
        "tf-node-flex-fxr": HTMLTfNodeFlexFxrElement;
        "tf-node-fxl-flex": HTMLTfNodeFxlFlexElement;
        "tf-node-fxl-flex-fxr": HTMLTfNodeFxlFlexFxrElement;
        "tf-node-header": HTMLTfNodeHeaderElement;
        "tf-node-header-title": HTMLTfNodeHeaderTitleElement;
        "tf-node-list": HTMLTfNodeListElement;
        "tf-node-row": HTMLTfNodeRowElement;
        "tf-node-row-cell": HTMLTfNodeRowCellElement;
        "tf-node-row-cell-h5": HTMLTfNodeRowCellH5Element;
        "tf-node-row-header": HTMLTfNodeRowHeaderElement;
        "tf-node-select-menu": HTMLTfNodeSelectMenuElement;
        "tf-node-status-bookend": HTMLTfNodeStatusBookendElement;
        "tf-node-text": HTMLTfNodeTextElement;
        "tf-p": HTMLTfPElement;
        "tf-p-tag": HTMLTfPTagElement;
        "tf-page-message": HTMLTfPageMessageElement;
        "tf-page-title": HTMLTfPageTitleElement;
        "tf-page-title-breadcrumbs": HTMLTfPageTitleBreadcrumbsElement;
        "tf-ph-overview-button": HTMLTfPhOverviewButtonElement;
        "tf-product-logo": HTMLTfProductLogoElement;
        "tf-quick-links": HTMLTfQuickLinksElement;
        "tf-radio": HTMLTfRadioElement;
        "tf-radio-group": HTMLTfRadioGroupElement;
        "tf-search": HTMLTfSearchElement;
        "tf-select": HTMLTfSelectElement;
        "tf-select-option": HTMLTfSelectOptionElement;
        "tf-side-drawer": HTMLTfSideDrawerElement;
        "tf-side-drawer-nav": HTMLTfSideDrawerNavElement;
        "tf-side-drawer-nav-link": HTMLTfSideDrawerNavLinkElement;
        "tf-side-drawer-sub-nav": HTMLTfSideDrawerSubNavElement;
        "tf-side-drawer-sub-nav-link": HTMLTfSideDrawerSubNavLinkElement;
        "tf-span-bold": HTMLTfSpanBoldElement;
        "tf-span-description": HTMLTfSpanDescriptionElement;
        "tf-span-italic": HTMLTfSpanItalicElement;
        "tf-span-italic-bold": HTMLTfSpanItalicBoldElement;
        "tf-span-normal": HTMLTfSpanNormalElement;
        "tf-span-title": HTMLTfSpanTitleElement;
        "tf-spinner": HTMLTfSpinnerElement;
        "tf-stat-data-card": HTMLTfStatDataCardElement;
        "tf-stats-panel": HTMLTfStatsPanelElement;
        "tf-status": HTMLTfStatusElement;
        "tf-status-beacon": HTMLTfStatusBeaconElement;
        "tf-table": HTMLTfTableElement;
        "tf-table-cell": HTMLTfTableCellElement;
        "tf-table-head": HTMLTfTableHeadElement;
        "tf-table-head-cell": HTMLTfTableHeadCellElement;
        "tf-table-row": HTMLTfTableRowElement;
        "tf-table-scrolling-container": HTMLTfTableScrollingContainerElement;
        "tf-test": HTMLTfTestElement;
        "tf-textarea": HTMLTfTextareaElement;
        "tf-transform-tagline": HTMLTfTransformTaglineElement;
        "tf-user": HTMLTfUserElement;
        "tf-value-pair": HTMLTfValuePairElement;
    }
}
declare namespace LocalJSX {
    interface TfA {
        "colour"?: string;
        "tagTitle"?: string;
        "target"?: string;
        "textAlign"?: string;
        "underlined"?: boolean;
        "url"?: string;
    }
    interface TfATag {
        "tagTitle"?: string;
        "url"?: string;
    }
    interface TfAlert {
        "alertId"?: string;
        "autoOpen"?: boolean;
        "autoOpenDelay"?: number;
        "buttonColour"?: string;
        "buttonSize"?: string;
        "buttonTitle"?: string;
        "colour"?: string;
        "icon"?: string;
        "message"?: string;
        "onTfAlertTransitionedOut"?: (event: CustomEvent<any>) => void;
        "opened"?: boolean;
        "showButton"?: boolean;
        "showDuration"?: number;
    }
    interface TfAlerts {
    }
    interface TfAppBaseFooter {
    }
    interface TfAppBaseHeader {
        "appInitials"?: string;
        "appTitle"?: string;
        "clientLogoSource"?: string;
        "isLogoClickable"?: boolean;
        "onTfAppLogoClicked"?: (event: CustomEvent<string>) => void;
        "showAppLogo"?: boolean;
        "showClientLogo"?: boolean;
        "showUserAccount"?: boolean;
        "userAccountMenuItems"?: any;
    }
    interface TfAppClientLogo {
        "clientLogoSource"?: string;
        "onTfUserAccountDropdownSelected"?: (event: CustomEvent<any>) => void;
        "showUserAccount"?: boolean;
    }
    interface TfAppHeader {
        "appInitials"?: string;
        "appTitle"?: string;
        "clientLogoSource"?: string;
        "onTfAppLogoClicked"?: (event: CustomEvent<string>) => void;
    }
    interface TfBreadcrumb {
        "hrefLink"?: string;
        "hrefTitle"?: string;
        "onTfRouterLinkClicked"?: (event: CustomEvent<any>) => void;
        "routerLink"?: string;
        "showChevron"?: boolean;
    }
    interface TfBreadcrumbs {
        "backButtonColour"?: string;
        "showBackButton"?: boolean;
    }
    interface TfButton {
        "buttonId"?: string;
        "buttonType"?: string;
        "colour"?: string;
        "disabled"?: boolean;
        "icon"?: any;
        "iconPosition"?: string;
        "size"?: string;
    }
    interface TfButtonContainer {
        "size"?: string;
    }
    interface TfCard {
        "colour"?: string;
        "padding"?: string;
    }
    interface TfCardContainer {
        "colour"?: string;
    }
    interface TfCardContent {
    }
    interface TfCardPanel {
        "colour"?: string;
        "padding"?: string;
        "shouldWrap"?: boolean;
    }
    interface TfCardTitle {
        "colour"?: string;
    }
    interface TfCheckbox {
        "checked"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnChecked"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfClientLogo {
        "clientLogoSource"?: string;
        "onTfUserAccountDropdownSelected"?: (event: CustomEvent<any>) => void;
        "showClientLogo"?: boolean;
        "showUserAccount"?: boolean;
        "userAccountMenuItems"?: any;
    }
    interface TfContainedCard {
        "colour"?: string;
    }
    interface TfDivider {
    }
    interface TfDropdown {
        "colour"?: string;
        "disabled"?: boolean;
        "displayTitle"?: string;
        "dropdownId"?: any;
        "onTfDropdownSelected"?: (event: CustomEvent<any>) => void;
        "position"?: string;
        "size"?: string;
    }
    interface TfDropdownLink {
        "colour"?: string;
        "hrefLink"?: string;
        "hrefTarget"?: string;
        "hrefTitle"?: string;
        "onTfCloseDropdown"?: (event: CustomEvent<string>) => void;
        "onTfDropdownLinkClicked"?: (event: CustomEvent<any>) => void;
        "routerLink"?: string;
    }
    interface TfDropdownOption {
    }
    interface TfDropdownOptions {
    }
    interface TfDropdownRenderedOption {
        "colour"?: string;
        "elementTitle"?: string;
        "onTfDropdownOptionClicked"?: (event: CustomEvent<any>) => void;
        "parent"?: string;
        "value"?: string;
    }
    interface TfFlex {
        "fillHeight"?: boolean;
        "fillWidth"?: boolean;
        "fx"?: string;
        "layout"?: string;
        "layoutAlign"?: string;
    }
    interface TfFormCard {
    }
    interface TfFormErrorItem {
    }
    interface TfFormErrors {
        "hide"?: boolean;
        "message"?: string;
    }
    interface TfFormTitle {
    }
    interface TfFormWrapper {
    }
    interface TfH1 {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfH2 {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfHexagon {
        "asButton"?: boolean;
        "color"?: string;
    }
    interface TfHexagonButton {
        "buttonId"?: string;
        "buttonType"?: string;
        "color"?: string;
        "disabled"?: boolean;
    }
    interface TfHexagonSvg {
        "color"?: string;
        "height"?: number;
        "size"?: string;
        "width"?: number;
    }
    interface TfIconAdd {
    }
    interface TfIconArrowDown {
    }
    interface TfIconArrowLeft {
    }
    interface TfIconArrowRight {
    }
    interface TfIconArrowUp {
    }
    interface TfIconButton {
        "buttonId"?: string;
        "buttonType"?: string;
        "colour"?: string;
        "disabled"?: boolean;
        "icon"?: any;
        "outlineColour"?: any;
        "size"?: string;
    }
    interface TfIconCalendar {
    }
    interface TfIconCheck {
    }
    interface TfIconChevronDown {
    }
    interface TfIconChevronLeft {
    }
    interface TfIconChevronRight {
    }
    interface TfIconChevronUp {
    }
    interface TfIconClose {
    }
    interface TfIconEnvelope {
    }
    interface TfIconExclamation {
    }
    interface TfIconFolder {
    }
    interface TfIconHexagon {
        "colour"?: string;
        "icon"?: any;
        "outlineColour"?: any;
        "size"?: string;
    }
    interface TfIconHexagonOutline {
    }
    interface TfIconLocked {
    }
    interface TfIconMinus {
    }
    interface TfIconNotification {
    }
    interface TfIconProductOutline {
        "colour"?: string;
        "initials"?: any;
        "size"?: string;
    }
    interface TfIconSearch {
    }
    interface TfIconSettings {
    }
    interface TfIconTag {
    }
    interface TfIconUnlocked {
    }
    interface TfIconUser {
    }
    interface TfInfoCard {
        "colour"?: string;
        "footerBorder"?: string;
        "showFooter"?: boolean;
        "tabColour"?: string;
    }
    interface TfInfoPanel {
        "colour"?: string;
        "padding"?: string;
    }
    interface TfInput {
        "autoComplete"?: string;
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "icon"?: string;
        "iconPosition"?: string;
        "inputType"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnInput"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfLeadingIconLabel {
        "contentAlign"?: string;
        "order"?: number;
    }
    interface TfList {
    }
    interface TfListItem {
    }
    interface TfListWrappingCell {
        "contentAlign"?: string;
        "order"?: number;
    }
    interface TfListWrappingItem {
    }
    interface TfLmsDelegateNode {
        "courseCode"?: string;
        "courseTitle"?: string;
        "delegateCoursesCount"?: number;
        "delegateDob"?: string;
        "delegateId"?: string;
        "delegateName"?: string;
        "delegateStatus"?: string;
    }
    interface TfLoginForm {
        "apiEndpoint"?: string;
        "apiHeaders"?: any;
        "apiMethod"?: string;
        "bodyPropEmail"?: string;
        "bodyPropPassword"?: string;
        "forgottenUrl"?: string;
        "onTfLoginSuccess"?: (event: CustomEvent<any>) => void;
    }
    interface TfMainContent {
    }
    interface TfMenuBar {
    }
    interface TfModal {
        "cancelColour"?: string;
        "cancelText"?: string;
        "confirmColour"?: string;
        "confirmText"?: string;
        "displayTitle"?: string;
        "headerStyle"?: string;
        "onTfModalClosed"?: (event: CustomEvent<any>) => void;
        "onTfModalConfirmed"?: (event: CustomEvent<any>) => void;
        "opened"?: boolean;
        "showCancel"?: boolean;
        "showClose"?: boolean;
        "showConfirm"?: boolean;
    }
    interface TfModal2 {
        "displayTitle"?: string;
    }
    interface TfNode {
    }
    interface TfNodeFlex {
    }
    interface TfNodeFlexFxr {
        "rWidth"?: string;
    }
    interface TfNodeFxlFlex {
        "lWidth"?: string;
    }
    interface TfNodeFxlFlexFxr {
        "lWidth"?: string;
        "rWidth"?: string;
    }
    interface TfNodeHeader {
    }
    interface TfNodeHeaderTitle {
        "justify"?: string;
    }
    interface TfNodeList {
    }
    interface TfNodeRow {
        "mobileWrap"?: boolean;
    }
    interface TfNodeRowCell {
        "cWidth"?: string;
        "layoutAlign"?: string;
    }
    interface TfNodeRowCellH5 {
    }
    interface TfNodeRowHeader {
        "mobileHide"?: boolean;
    }
    interface TfNodeSelectMenu {
    }
    interface TfNodeStatusBookend {
        "color"?: string;
        "showTooltip"?: boolean;
    }
    interface TfNodeText {
        "justify"?: string;
    }
    interface TfP {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfPTag {
        "tagTitle"?: string;
        "textAlign"?: string;
        "url"?: string;
    }
    interface TfPageMessage {
    }
    interface TfPageTitle {
    }
    interface TfPageTitleBreadcrumbs {
        "backButtonColour"?: string;
        "onTfBackButtonClicked"?: (event: CustomEvent<any>) => void;
        "showBackButton"?: boolean;
    }
    interface TfPhOverviewButton {
        "cardTitle"?: string;
        "isActive"?: boolean;
        "marketingCtaAsButton"?: boolean;
        "onTfPhOverviewButtonClicked"?: (event: CustomEvent<any>) => void;
        "onTfPhOverviewFindOutMoreClicked"?: (event: CustomEvent<any>) => void;
        "productCode"?: string;
        "productCta"?: string;
        "productDescription"?: string;
        "productId"?: string;
        "productInitials"?: string;
        "productTitle"?: string;
    }
    interface TfProductLogo {
        "asOutline"?: boolean;
        "code"?: string;
        "colour"?: string;
        "initials"?: string;
        "initialsColour"?: string;
        "size"?: string;
    }
    interface TfQuickLinks {
        "disabled"?: boolean;
        "dropdownId"?: any;
        "onTfDropdownSelected"?: (event: CustomEvent<any>) => void;
    }
    interface TfRadio {
        "checked"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        "groupName"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnChecked"?: (event: CustomEvent<any>) => void;
        "onTfOnRadioSelected"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfRadioGroup {
        "description"?: string;
        "error"?: boolean;
        "errorMessage"?: string;
        "groupName"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnItemSelected"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfSearch {
        "autoComplete"?: string;
        "inputType"?: string;
        "name"?: string;
        "onTfOnInput"?: (event: CustomEvent<any>) => void;
        "onTfOnSearch"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface TfSelect {
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "icon"?: string;
        "iconPosition"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnSelect"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfSelectOption {
    }
    interface TfSideDrawer {
        "displayTitle"?: string;
        "opened"?: boolean;
    }
    interface TfSideDrawerNav {
    }
    interface TfSideDrawerNavLink {
        "hrefLink"?: string;
        "hrefTitle"?: string;
        "onTfCloseSideDrawer"?: (event: CustomEvent<string>) => void;
        "onTfRouterLinkClicked"?: (event: CustomEvent<any>) => void;
        "routerLink"?: string;
    }
    interface TfSideDrawerSubNav {
    }
    interface TfSideDrawerSubNavLink {
        "hrefLink"?: string;
        "hrefTitle"?: string;
        "onTfCloseSideDrawer"?: (event: CustomEvent<string>) => void;
        "onTfRouterLinkClicked"?: (event: CustomEvent<any>) => void;
        "routerLink"?: string;
    }
    interface TfSpanBold {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfSpanDescription {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfSpanItalic {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfSpanItalicBold {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfSpanNormal {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfSpanTitle {
        "colour"?: string;
        "textAlign"?: string;
    }
    interface TfSpinner {
    }
    interface TfStatDataCard {
        "colour"?: string;
    }
    interface TfStatsPanel {
    }
    interface TfStatus {
        "trafficLightColour"?: string;
    }
    interface TfStatusBeacon {
        "trafficLightColour"?: string;
    }
    interface TfTable {
    }
    interface TfTableCell {
        "textAlign"?: string;
    }
    interface TfTableHead {
    }
    interface TfTableHeadCell {
    }
    interface TfTableRow {
    }
    interface TfTableScrollingContainer {
    }
    interface TfTest {
    }
    interface TfTextarea {
        "autoComplete"?: string;
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "icon"?: string;
        "iconPosition"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnInput"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "rowCount"?: number;
        "value"?: string;
    }
    interface TfTransformTagline {
    }
    interface TfUser {
    }
    interface TfValuePair {
    }
    interface IntrinsicElements {
        "tf-a": TfA;
        "tf-a-tag": TfATag;
        "tf-alert": TfAlert;
        "tf-alerts": TfAlerts;
        "tf-app-base-footer": TfAppBaseFooter;
        "tf-app-base-header": TfAppBaseHeader;
        "tf-app-client-logo": TfAppClientLogo;
        "tf-app-header": TfAppHeader;
        "tf-breadcrumb": TfBreadcrumb;
        "tf-breadcrumbs": TfBreadcrumbs;
        "tf-button": TfButton;
        "tf-button-container": TfButtonContainer;
        "tf-card": TfCard;
        "tf-card-container": TfCardContainer;
        "tf-card-content": TfCardContent;
        "tf-card-panel": TfCardPanel;
        "tf-card-title": TfCardTitle;
        "tf-checkbox": TfCheckbox;
        "tf-client-logo": TfClientLogo;
        "tf-contained-card": TfContainedCard;
        "tf-divider": TfDivider;
        "tf-dropdown": TfDropdown;
        "tf-dropdown-link": TfDropdownLink;
        "tf-dropdown-option": TfDropdownOption;
        "tf-dropdown-options": TfDropdownOptions;
        "tf-dropdown-rendered-option": TfDropdownRenderedOption;
        "tf-flex": TfFlex;
        "tf-form-card": TfFormCard;
        "tf-form-error-item": TfFormErrorItem;
        "tf-form-errors": TfFormErrors;
        "tf-form-title": TfFormTitle;
        "tf-form-wrapper": TfFormWrapper;
        "tf-h1": TfH1;
        "tf-h2": TfH2;
        "tf-hexagon": TfHexagon;
        "tf-hexagon-button": TfHexagonButton;
        "tf-hexagon-svg": TfHexagonSvg;
        "tf-icon-add": TfIconAdd;
        "tf-icon-arrow-down": TfIconArrowDown;
        "tf-icon-arrow-left": TfIconArrowLeft;
        "tf-icon-arrow-right": TfIconArrowRight;
        "tf-icon-arrow-up": TfIconArrowUp;
        "tf-icon-button": TfIconButton;
        "tf-icon-calendar": TfIconCalendar;
        "tf-icon-check": TfIconCheck;
        "tf-icon-chevron-down": TfIconChevronDown;
        "tf-icon-chevron-left": TfIconChevronLeft;
        "tf-icon-chevron-right": TfIconChevronRight;
        "tf-icon-chevron-up": TfIconChevronUp;
        "tf-icon-close": TfIconClose;
        "tf-icon-envelope": TfIconEnvelope;
        "tf-icon-exclamation": TfIconExclamation;
        "tf-icon-folder": TfIconFolder;
        "tf-icon-hexagon": TfIconHexagon;
        "tf-icon-hexagon-outline": TfIconHexagonOutline;
        "tf-icon-locked": TfIconLocked;
        "tf-icon-minus": TfIconMinus;
        "tf-icon-notification": TfIconNotification;
        "tf-icon-product-outline": TfIconProductOutline;
        "tf-icon-search": TfIconSearch;
        "tf-icon-settings": TfIconSettings;
        "tf-icon-tag": TfIconTag;
        "tf-icon-unlocked": TfIconUnlocked;
        "tf-icon-user": TfIconUser;
        "tf-info-card": TfInfoCard;
        "tf-info-panel": TfInfoPanel;
        "tf-input": TfInput;
        "tf-leading-icon-label": TfLeadingIconLabel;
        "tf-list": TfList;
        "tf-list-item": TfListItem;
        "tf-list-wrapping-cell": TfListWrappingCell;
        "tf-list-wrapping-item": TfListWrappingItem;
        "tf-lms-delegate-node": TfLmsDelegateNode;
        "tf-login-form": TfLoginForm;
        "tf-main-content": TfMainContent;
        "tf-menu-bar": TfMenuBar;
        "tf-modal": TfModal;
        "tf-modal-2": TfModal2;
        "tf-node": TfNode;
        "tf-node-flex": TfNodeFlex;
        "tf-node-flex-fxr": TfNodeFlexFxr;
        "tf-node-fxl-flex": TfNodeFxlFlex;
        "tf-node-fxl-flex-fxr": TfNodeFxlFlexFxr;
        "tf-node-header": TfNodeHeader;
        "tf-node-header-title": TfNodeHeaderTitle;
        "tf-node-list": TfNodeList;
        "tf-node-row": TfNodeRow;
        "tf-node-row-cell": TfNodeRowCell;
        "tf-node-row-cell-h5": TfNodeRowCellH5;
        "tf-node-row-header": TfNodeRowHeader;
        "tf-node-select-menu": TfNodeSelectMenu;
        "tf-node-status-bookend": TfNodeStatusBookend;
        "tf-node-text": TfNodeText;
        "tf-p": TfP;
        "tf-p-tag": TfPTag;
        "tf-page-message": TfPageMessage;
        "tf-page-title": TfPageTitle;
        "tf-page-title-breadcrumbs": TfPageTitleBreadcrumbs;
        "tf-ph-overview-button": TfPhOverviewButton;
        "tf-product-logo": TfProductLogo;
        "tf-quick-links": TfQuickLinks;
        "tf-radio": TfRadio;
        "tf-radio-group": TfRadioGroup;
        "tf-search": TfSearch;
        "tf-select": TfSelect;
        "tf-select-option": TfSelectOption;
        "tf-side-drawer": TfSideDrawer;
        "tf-side-drawer-nav": TfSideDrawerNav;
        "tf-side-drawer-nav-link": TfSideDrawerNavLink;
        "tf-side-drawer-sub-nav": TfSideDrawerSubNav;
        "tf-side-drawer-sub-nav-link": TfSideDrawerSubNavLink;
        "tf-span-bold": TfSpanBold;
        "tf-span-description": TfSpanDescription;
        "tf-span-italic": TfSpanItalic;
        "tf-span-italic-bold": TfSpanItalicBold;
        "tf-span-normal": TfSpanNormal;
        "tf-span-title": TfSpanTitle;
        "tf-spinner": TfSpinner;
        "tf-stat-data-card": TfStatDataCard;
        "tf-stats-panel": TfStatsPanel;
        "tf-status": TfStatus;
        "tf-status-beacon": TfStatusBeacon;
        "tf-table": TfTable;
        "tf-table-cell": TfTableCell;
        "tf-table-head": TfTableHead;
        "tf-table-head-cell": TfTableHeadCell;
        "tf-table-row": TfTableRow;
        "tf-table-scrolling-container": TfTableScrollingContainer;
        "tf-test": TfTest;
        "tf-textarea": TfTextarea;
        "tf-transform-tagline": TfTransformTagline;
        "tf-user": TfUser;
        "tf-value-pair": TfValuePair;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tf-a": LocalJSX.TfA & JSXBase.HTMLAttributes<HTMLTfAElement>;
            "tf-a-tag": LocalJSX.TfATag & JSXBase.HTMLAttributes<HTMLTfATagElement>;
            "tf-alert": LocalJSX.TfAlert & JSXBase.HTMLAttributes<HTMLTfAlertElement>;
            "tf-alerts": LocalJSX.TfAlerts & JSXBase.HTMLAttributes<HTMLTfAlertsElement>;
            "tf-app-base-footer": LocalJSX.TfAppBaseFooter & JSXBase.HTMLAttributes<HTMLTfAppBaseFooterElement>;
            "tf-app-base-header": LocalJSX.TfAppBaseHeader & JSXBase.HTMLAttributes<HTMLTfAppBaseHeaderElement>;
            "tf-app-client-logo": LocalJSX.TfAppClientLogo & JSXBase.HTMLAttributes<HTMLTfAppClientLogoElement>;
            "tf-app-header": LocalJSX.TfAppHeader & JSXBase.HTMLAttributes<HTMLTfAppHeaderElement>;
            "tf-breadcrumb": LocalJSX.TfBreadcrumb & JSXBase.HTMLAttributes<HTMLTfBreadcrumbElement>;
            "tf-breadcrumbs": LocalJSX.TfBreadcrumbs & JSXBase.HTMLAttributes<HTMLTfBreadcrumbsElement>;
            "tf-button": LocalJSX.TfButton & JSXBase.HTMLAttributes<HTMLTfButtonElement>;
            "tf-button-container": LocalJSX.TfButtonContainer & JSXBase.HTMLAttributes<HTMLTfButtonContainerElement>;
            "tf-card": LocalJSX.TfCard & JSXBase.HTMLAttributes<HTMLTfCardElement>;
            "tf-card-container": LocalJSX.TfCardContainer & JSXBase.HTMLAttributes<HTMLTfCardContainerElement>;
            "tf-card-content": LocalJSX.TfCardContent & JSXBase.HTMLAttributes<HTMLTfCardContentElement>;
            "tf-card-panel": LocalJSX.TfCardPanel & JSXBase.HTMLAttributes<HTMLTfCardPanelElement>;
            "tf-card-title": LocalJSX.TfCardTitle & JSXBase.HTMLAttributes<HTMLTfCardTitleElement>;
            "tf-checkbox": LocalJSX.TfCheckbox & JSXBase.HTMLAttributes<HTMLTfCheckboxElement>;
            "tf-client-logo": LocalJSX.TfClientLogo & JSXBase.HTMLAttributes<HTMLTfClientLogoElement>;
            "tf-contained-card": LocalJSX.TfContainedCard & JSXBase.HTMLAttributes<HTMLTfContainedCardElement>;
            "tf-divider": LocalJSX.TfDivider & JSXBase.HTMLAttributes<HTMLTfDividerElement>;
            "tf-dropdown": LocalJSX.TfDropdown & JSXBase.HTMLAttributes<HTMLTfDropdownElement>;
            "tf-dropdown-link": LocalJSX.TfDropdownLink & JSXBase.HTMLAttributes<HTMLTfDropdownLinkElement>;
            "tf-dropdown-option": LocalJSX.TfDropdownOption & JSXBase.HTMLAttributes<HTMLTfDropdownOptionElement>;
            "tf-dropdown-options": LocalJSX.TfDropdownOptions & JSXBase.HTMLAttributes<HTMLTfDropdownOptionsElement>;
            "tf-dropdown-rendered-option": LocalJSX.TfDropdownRenderedOption & JSXBase.HTMLAttributes<HTMLTfDropdownRenderedOptionElement>;
            "tf-flex": LocalJSX.TfFlex & JSXBase.HTMLAttributes<HTMLTfFlexElement>;
            "tf-form-card": LocalJSX.TfFormCard & JSXBase.HTMLAttributes<HTMLTfFormCardElement>;
            "tf-form-error-item": LocalJSX.TfFormErrorItem & JSXBase.HTMLAttributes<HTMLTfFormErrorItemElement>;
            "tf-form-errors": LocalJSX.TfFormErrors & JSXBase.HTMLAttributes<HTMLTfFormErrorsElement>;
            "tf-form-title": LocalJSX.TfFormTitle & JSXBase.HTMLAttributes<HTMLTfFormTitleElement>;
            "tf-form-wrapper": LocalJSX.TfFormWrapper & JSXBase.HTMLAttributes<HTMLTfFormWrapperElement>;
            "tf-h1": LocalJSX.TfH1 & JSXBase.HTMLAttributes<HTMLTfH1Element>;
            "tf-h2": LocalJSX.TfH2 & JSXBase.HTMLAttributes<HTMLTfH2Element>;
            "tf-hexagon": LocalJSX.TfHexagon & JSXBase.HTMLAttributes<HTMLTfHexagonElement>;
            "tf-hexagon-button": LocalJSX.TfHexagonButton & JSXBase.HTMLAttributes<HTMLTfHexagonButtonElement>;
            "tf-hexagon-svg": LocalJSX.TfHexagonSvg & JSXBase.HTMLAttributes<HTMLTfHexagonSvgElement>;
            "tf-icon-add": LocalJSX.TfIconAdd & JSXBase.HTMLAttributes<HTMLTfIconAddElement>;
            "tf-icon-arrow-down": LocalJSX.TfIconArrowDown & JSXBase.HTMLAttributes<HTMLTfIconArrowDownElement>;
            "tf-icon-arrow-left": LocalJSX.TfIconArrowLeft & JSXBase.HTMLAttributes<HTMLTfIconArrowLeftElement>;
            "tf-icon-arrow-right": LocalJSX.TfIconArrowRight & JSXBase.HTMLAttributes<HTMLTfIconArrowRightElement>;
            "tf-icon-arrow-up": LocalJSX.TfIconArrowUp & JSXBase.HTMLAttributes<HTMLTfIconArrowUpElement>;
            "tf-icon-button": LocalJSX.TfIconButton & JSXBase.HTMLAttributes<HTMLTfIconButtonElement>;
            "tf-icon-calendar": LocalJSX.TfIconCalendar & JSXBase.HTMLAttributes<HTMLTfIconCalendarElement>;
            "tf-icon-check": LocalJSX.TfIconCheck & JSXBase.HTMLAttributes<HTMLTfIconCheckElement>;
            "tf-icon-chevron-down": LocalJSX.TfIconChevronDown & JSXBase.HTMLAttributes<HTMLTfIconChevronDownElement>;
            "tf-icon-chevron-left": LocalJSX.TfIconChevronLeft & JSXBase.HTMLAttributes<HTMLTfIconChevronLeftElement>;
            "tf-icon-chevron-right": LocalJSX.TfIconChevronRight & JSXBase.HTMLAttributes<HTMLTfIconChevronRightElement>;
            "tf-icon-chevron-up": LocalJSX.TfIconChevronUp & JSXBase.HTMLAttributes<HTMLTfIconChevronUpElement>;
            "tf-icon-close": LocalJSX.TfIconClose & JSXBase.HTMLAttributes<HTMLTfIconCloseElement>;
            "tf-icon-envelope": LocalJSX.TfIconEnvelope & JSXBase.HTMLAttributes<HTMLTfIconEnvelopeElement>;
            "tf-icon-exclamation": LocalJSX.TfIconExclamation & JSXBase.HTMLAttributes<HTMLTfIconExclamationElement>;
            "tf-icon-folder": LocalJSX.TfIconFolder & JSXBase.HTMLAttributes<HTMLTfIconFolderElement>;
            "tf-icon-hexagon": LocalJSX.TfIconHexagon & JSXBase.HTMLAttributes<HTMLTfIconHexagonElement>;
            "tf-icon-hexagon-outline": LocalJSX.TfIconHexagonOutline & JSXBase.HTMLAttributes<HTMLTfIconHexagonOutlineElement>;
            "tf-icon-locked": LocalJSX.TfIconLocked & JSXBase.HTMLAttributes<HTMLTfIconLockedElement>;
            "tf-icon-minus": LocalJSX.TfIconMinus & JSXBase.HTMLAttributes<HTMLTfIconMinusElement>;
            "tf-icon-notification": LocalJSX.TfIconNotification & JSXBase.HTMLAttributes<HTMLTfIconNotificationElement>;
            "tf-icon-product-outline": LocalJSX.TfIconProductOutline & JSXBase.HTMLAttributes<HTMLTfIconProductOutlineElement>;
            "tf-icon-search": LocalJSX.TfIconSearch & JSXBase.HTMLAttributes<HTMLTfIconSearchElement>;
            "tf-icon-settings": LocalJSX.TfIconSettings & JSXBase.HTMLAttributes<HTMLTfIconSettingsElement>;
            "tf-icon-tag": LocalJSX.TfIconTag & JSXBase.HTMLAttributes<HTMLTfIconTagElement>;
            "tf-icon-unlocked": LocalJSX.TfIconUnlocked & JSXBase.HTMLAttributes<HTMLTfIconUnlockedElement>;
            "tf-icon-user": LocalJSX.TfIconUser & JSXBase.HTMLAttributes<HTMLTfIconUserElement>;
            "tf-info-card": LocalJSX.TfInfoCard & JSXBase.HTMLAttributes<HTMLTfInfoCardElement>;
            "tf-info-panel": LocalJSX.TfInfoPanel & JSXBase.HTMLAttributes<HTMLTfInfoPanelElement>;
            "tf-input": LocalJSX.TfInput & JSXBase.HTMLAttributes<HTMLTfInputElement>;
            "tf-leading-icon-label": LocalJSX.TfLeadingIconLabel & JSXBase.HTMLAttributes<HTMLTfLeadingIconLabelElement>;
            "tf-list": LocalJSX.TfList & JSXBase.HTMLAttributes<HTMLTfListElement>;
            "tf-list-item": LocalJSX.TfListItem & JSXBase.HTMLAttributes<HTMLTfListItemElement>;
            "tf-list-wrapping-cell": LocalJSX.TfListWrappingCell & JSXBase.HTMLAttributes<HTMLTfListWrappingCellElement>;
            "tf-list-wrapping-item": LocalJSX.TfListWrappingItem & JSXBase.HTMLAttributes<HTMLTfListWrappingItemElement>;
            "tf-lms-delegate-node": LocalJSX.TfLmsDelegateNode & JSXBase.HTMLAttributes<HTMLTfLmsDelegateNodeElement>;
            "tf-login-form": LocalJSX.TfLoginForm & JSXBase.HTMLAttributes<HTMLTfLoginFormElement>;
            "tf-main-content": LocalJSX.TfMainContent & JSXBase.HTMLAttributes<HTMLTfMainContentElement>;
            "tf-menu-bar": LocalJSX.TfMenuBar & JSXBase.HTMLAttributes<HTMLTfMenuBarElement>;
            "tf-modal": LocalJSX.TfModal & JSXBase.HTMLAttributes<HTMLTfModalElement>;
            "tf-modal-2": LocalJSX.TfModal2 & JSXBase.HTMLAttributes<HTMLTfModal2Element>;
            "tf-node": LocalJSX.TfNode & JSXBase.HTMLAttributes<HTMLTfNodeElement>;
            "tf-node-flex": LocalJSX.TfNodeFlex & JSXBase.HTMLAttributes<HTMLTfNodeFlexElement>;
            "tf-node-flex-fxr": LocalJSX.TfNodeFlexFxr & JSXBase.HTMLAttributes<HTMLTfNodeFlexFxrElement>;
            "tf-node-fxl-flex": LocalJSX.TfNodeFxlFlex & JSXBase.HTMLAttributes<HTMLTfNodeFxlFlexElement>;
            "tf-node-fxl-flex-fxr": LocalJSX.TfNodeFxlFlexFxr & JSXBase.HTMLAttributes<HTMLTfNodeFxlFlexFxrElement>;
            "tf-node-header": LocalJSX.TfNodeHeader & JSXBase.HTMLAttributes<HTMLTfNodeHeaderElement>;
            "tf-node-header-title": LocalJSX.TfNodeHeaderTitle & JSXBase.HTMLAttributes<HTMLTfNodeHeaderTitleElement>;
            "tf-node-list": LocalJSX.TfNodeList & JSXBase.HTMLAttributes<HTMLTfNodeListElement>;
            "tf-node-row": LocalJSX.TfNodeRow & JSXBase.HTMLAttributes<HTMLTfNodeRowElement>;
            "tf-node-row-cell": LocalJSX.TfNodeRowCell & JSXBase.HTMLAttributes<HTMLTfNodeRowCellElement>;
            "tf-node-row-cell-h5": LocalJSX.TfNodeRowCellH5 & JSXBase.HTMLAttributes<HTMLTfNodeRowCellH5Element>;
            "tf-node-row-header": LocalJSX.TfNodeRowHeader & JSXBase.HTMLAttributes<HTMLTfNodeRowHeaderElement>;
            "tf-node-select-menu": LocalJSX.TfNodeSelectMenu & JSXBase.HTMLAttributes<HTMLTfNodeSelectMenuElement>;
            "tf-node-status-bookend": LocalJSX.TfNodeStatusBookend & JSXBase.HTMLAttributes<HTMLTfNodeStatusBookendElement>;
            "tf-node-text": LocalJSX.TfNodeText & JSXBase.HTMLAttributes<HTMLTfNodeTextElement>;
            "tf-p": LocalJSX.TfP & JSXBase.HTMLAttributes<HTMLTfPElement>;
            "tf-p-tag": LocalJSX.TfPTag & JSXBase.HTMLAttributes<HTMLTfPTagElement>;
            "tf-page-message": LocalJSX.TfPageMessage & JSXBase.HTMLAttributes<HTMLTfPageMessageElement>;
            "tf-page-title": LocalJSX.TfPageTitle & JSXBase.HTMLAttributes<HTMLTfPageTitleElement>;
            "tf-page-title-breadcrumbs": LocalJSX.TfPageTitleBreadcrumbs & JSXBase.HTMLAttributes<HTMLTfPageTitleBreadcrumbsElement>;
            "tf-ph-overview-button": LocalJSX.TfPhOverviewButton & JSXBase.HTMLAttributes<HTMLTfPhOverviewButtonElement>;
            "tf-product-logo": LocalJSX.TfProductLogo & JSXBase.HTMLAttributes<HTMLTfProductLogoElement>;
            "tf-quick-links": LocalJSX.TfQuickLinks & JSXBase.HTMLAttributes<HTMLTfQuickLinksElement>;
            "tf-radio": LocalJSX.TfRadio & JSXBase.HTMLAttributes<HTMLTfRadioElement>;
            "tf-radio-group": LocalJSX.TfRadioGroup & JSXBase.HTMLAttributes<HTMLTfRadioGroupElement>;
            "tf-search": LocalJSX.TfSearch & JSXBase.HTMLAttributes<HTMLTfSearchElement>;
            "tf-select": LocalJSX.TfSelect & JSXBase.HTMLAttributes<HTMLTfSelectElement>;
            "tf-select-option": LocalJSX.TfSelectOption & JSXBase.HTMLAttributes<HTMLTfSelectOptionElement>;
            "tf-side-drawer": LocalJSX.TfSideDrawer & JSXBase.HTMLAttributes<HTMLTfSideDrawerElement>;
            "tf-side-drawer-nav": LocalJSX.TfSideDrawerNav & JSXBase.HTMLAttributes<HTMLTfSideDrawerNavElement>;
            "tf-side-drawer-nav-link": LocalJSX.TfSideDrawerNavLink & JSXBase.HTMLAttributes<HTMLTfSideDrawerNavLinkElement>;
            "tf-side-drawer-sub-nav": LocalJSX.TfSideDrawerSubNav & JSXBase.HTMLAttributes<HTMLTfSideDrawerSubNavElement>;
            "tf-side-drawer-sub-nav-link": LocalJSX.TfSideDrawerSubNavLink & JSXBase.HTMLAttributes<HTMLTfSideDrawerSubNavLinkElement>;
            "tf-span-bold": LocalJSX.TfSpanBold & JSXBase.HTMLAttributes<HTMLTfSpanBoldElement>;
            "tf-span-description": LocalJSX.TfSpanDescription & JSXBase.HTMLAttributes<HTMLTfSpanDescriptionElement>;
            "tf-span-italic": LocalJSX.TfSpanItalic & JSXBase.HTMLAttributes<HTMLTfSpanItalicElement>;
            "tf-span-italic-bold": LocalJSX.TfSpanItalicBold & JSXBase.HTMLAttributes<HTMLTfSpanItalicBoldElement>;
            "tf-span-normal": LocalJSX.TfSpanNormal & JSXBase.HTMLAttributes<HTMLTfSpanNormalElement>;
            "tf-span-title": LocalJSX.TfSpanTitle & JSXBase.HTMLAttributes<HTMLTfSpanTitleElement>;
            "tf-spinner": LocalJSX.TfSpinner & JSXBase.HTMLAttributes<HTMLTfSpinnerElement>;
            "tf-stat-data-card": LocalJSX.TfStatDataCard & JSXBase.HTMLAttributes<HTMLTfStatDataCardElement>;
            "tf-stats-panel": LocalJSX.TfStatsPanel & JSXBase.HTMLAttributes<HTMLTfStatsPanelElement>;
            "tf-status": LocalJSX.TfStatus & JSXBase.HTMLAttributes<HTMLTfStatusElement>;
            "tf-status-beacon": LocalJSX.TfStatusBeacon & JSXBase.HTMLAttributes<HTMLTfStatusBeaconElement>;
            "tf-table": LocalJSX.TfTable & JSXBase.HTMLAttributes<HTMLTfTableElement>;
            "tf-table-cell": LocalJSX.TfTableCell & JSXBase.HTMLAttributes<HTMLTfTableCellElement>;
            "tf-table-head": LocalJSX.TfTableHead & JSXBase.HTMLAttributes<HTMLTfTableHeadElement>;
            "tf-table-head-cell": LocalJSX.TfTableHeadCell & JSXBase.HTMLAttributes<HTMLTfTableHeadCellElement>;
            "tf-table-row": LocalJSX.TfTableRow & JSXBase.HTMLAttributes<HTMLTfTableRowElement>;
            "tf-table-scrolling-container": LocalJSX.TfTableScrollingContainer & JSXBase.HTMLAttributes<HTMLTfTableScrollingContainerElement>;
            "tf-test": LocalJSX.TfTest & JSXBase.HTMLAttributes<HTMLTfTestElement>;
            "tf-textarea": LocalJSX.TfTextarea & JSXBase.HTMLAttributes<HTMLTfTextareaElement>;
            "tf-transform-tagline": LocalJSX.TfTransformTagline & JSXBase.HTMLAttributes<HTMLTfTransformTaglineElement>;
            "tf-user": LocalJSX.TfUser & JSXBase.HTMLAttributes<HTMLTfUserElement>;
            "tf-value-pair": LocalJSX.TfValuePair & JSXBase.HTMLAttributes<HTMLTfValuePairElement>;
        }
    }
}
