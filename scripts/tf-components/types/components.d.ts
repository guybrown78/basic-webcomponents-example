/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface TfATag {
        "tagTitle": string;
        "url": string;
    }
    interface TfAppBaseHeader {
        "appInitials": string;
        "appTitle": string;
        "clientLogoSource": string;
        "showAppLogo": boolean;
        "showClientLogo": boolean;
    }
    interface TfAppHeader {
        "appInitials": string;
        "appTitle": string;
        "clientLogoSource": string;
    }
    interface TfButton {
        "buttonId": string;
        "buttonType": string;
        "colour": string;
        "disabled": boolean;
        "icon": any;
        "iconPosition": string;
        "size": string;
    }
    interface TfButtonContainer {
        "size": string;
    }
    interface TfCard {
        "colour": string;
    }
    interface TfCardContainer {
        "colour": string;
    }
    interface TfCardContent {
    }
    interface TfCardTitle {
        "colour": string;
    }
    interface TfCheckbox {
        "checked": boolean;
        "error": boolean;
        "errorMessage": string;
        "getChecked": () => Promise<boolean>;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "label": string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface TfContainedCard {
        "colour": string;
    }
    interface TfDivider {
    }
    interface TfDropdown {
        "colour": string;
        "disabled": boolean;
        "displayTitle": string;
        "dropdownId": any;
        "position": string;
        "size": string;
    }
    interface TfDropdownLink {
        "colour": string;
        "hrefLink": string;
        "hrefTarget": string;
        "hrefTitle": string;
        "routerLink": string;
    }
    interface TfDropdownOption {
    }
    interface TfDropdownOptions {
    }
    interface TfDropdownRenderedOption {
        "colour": string;
        "elementTitle": string;
        "parent": string;
        "value": string;
    }
    interface TfFlex {
        "fillHeight": boolean;
        "fillWidth": boolean;
        "layout": string;
        "layoutAlign": string;
    }
    interface TfHexagon {
        "asButton": boolean;
        "color": string;
    }
    interface TfHexagonButton {
        "buttonId": string;
        "buttonType": string;
        "color": string;
        "disabled": boolean;
    }
    interface TfHexagonSvg {
        "color": string;
        "height": number;
        "size": string;
        "width": number;
    }
    interface TfIconButton {
        "buttonId": string;
        "buttonType": string;
        "colour": string;
        "disabled": boolean;
        "icon": any;
        "size": string;
    }
    interface TfIconCheck {
    }
    interface TfIconChevronDown {
    }
    interface TfIconChevronLeft {
    }
    interface TfIconChevronRight {
    }
    interface TfIconChevronUp {
    }
    interface TfIconClose {
    }
    interface TfIconEnvelope {
    }
    interface TfIconExclamation {
    }
    interface TfIconNotification {
    }
    interface TfIconSearch {
    }
    interface TfIconUser {
    }
    interface TfInput {
        "autoComplete": string;
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "icon": string;
        "iconPosition": string;
        "inputType": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface TfLeadingIconLabel {
        "contentAlign": string;
        "order": number;
    }
    interface TfList {
    }
    interface TfListItem {
    }
    interface TfListWrappingCell {
        "contentAlign": string;
        "order": number;
    }
    interface TfListWrappingItem {
    }
    interface TfLmsDelegateNode {
        "courseCode": string;
        "courseTitle": string;
        "delegateCoursesCount": number;
        "delegateDob": string;
        "delegateId": string;
        "delegateName": string;
        "delegateStatus": string;
    }
    interface TfLoginForm {
        "apiEndpoint": string;
        "apiHeaders": any;
        "apiMethod": string;
        "bodyPropEmail": string;
        "bodyPropPassword": string;
        "forgottenUrl": string;
    }
    interface TfMainContent {
    }
    interface TfMenuBar {
    }
    interface TfModal {
        "cancelColour": string;
        "cancelText": string;
        "confirmColour": string;
        "confirmText": string;
        "displayTitle": string;
        "headerStyle": string;
        "open": () => Promise<void>;
        "opened": boolean;
        "showCancel": boolean;
        "showClose": boolean;
        "showConfirm": boolean;
    }
    interface TfModal2 {
        "displayTitle": string;
    }
    interface TfNode {
    }
    interface TfNodeFlex {
    }
    interface TfNodeFlexFxr {
        "rWidth": string;
    }
    interface TfNodeFxlFlex {
        "lWidth": string;
    }
    interface TfNodeFxlFlexFxr {
        "lWidth": string;
        "rWidth": string;
    }
    interface TfNodeHeader {
    }
    interface TfNodeHeaderTitle {
        "justify": string;
    }
    interface TfNodeList {
    }
    interface TfNodeSelectMenu {
    }
    interface TfNodeStatusBookend {
        "color": string;
        "showTooltip": boolean;
    }
    interface TfNodeText {
        "justify": string;
    }
    interface TfPTag {
        "tagTitle": string;
        "textAlign": string;
        "url": string;
    }
    interface TfRadio {
        "checked": boolean;
        "error": boolean;
        "errorMessage": string;
        "getChecked": () => Promise<boolean>;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "groupName": string;
        "hideLabel": boolean;
        "hint": string;
        "label": string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface TfRadioGroup {
        "description": string;
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<string>;
        "groupName": string;
        "hideLabel": boolean;
        "hint": string;
        "label": string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface TfSelect {
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLSelectElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "icon": string;
        "iconPosition": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "value": string;
    }
    interface TfSelectOption {
    }
    interface TfSideDrawer {
        "displayTitle": string;
        "open": () => Promise<void>;
        "opened": boolean;
    }
    interface TfSideDrawerNav {
    }
    interface TfSideDrawerNavLink {
        "hrefLink": string;
        "hrefTitle": string;
        "routerLink": string;
    }
    interface TfSideDrawerSubNav {
    }
    interface TfSideDrawerSubNavLink {
        "hrefLink": string;
        "hrefTitle": string;
        "routerLink": string;
    }
    interface TfSpinner {
    }
    interface TfStatDataCard {
        "colour": string;
    }
    interface TfStatsPanel {
    }
    interface TfStatus {
        "trafficLightColour": string;
    }
    interface TfTable {
    }
    interface TfTableCell {
        "textAlign": string;
    }
    interface TfTableHead {
    }
    interface TfTableHeadCell {
    }
    interface TfTableRow {
    }
    interface TfTextarea {
        "autoComplete": string;
        "error": boolean;
        "errorMessage": string;
        "getItemRef": () => Promise<HTMLTextAreaElement>;
        "getValue": () => Promise<string>;
        "hideLabel": boolean;
        "hint": string;
        "icon": string;
        "iconPosition": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "required": boolean;
        "rowCount": number;
        "value": string;
    }
    interface TfUser {
    }
    interface TfValuePair {
    }
}
declare global {
    interface HTMLTfATagElement extends Components.TfATag, HTMLStencilElement {
    }
    var HTMLTfATagElement: {
        prototype: HTMLTfATagElement;
        new (): HTMLTfATagElement;
    };
    interface HTMLTfAppBaseHeaderElement extends Components.TfAppBaseHeader, HTMLStencilElement {
    }
    var HTMLTfAppBaseHeaderElement: {
        prototype: HTMLTfAppBaseHeaderElement;
        new (): HTMLTfAppBaseHeaderElement;
    };
    interface HTMLTfAppHeaderElement extends Components.TfAppHeader, HTMLStencilElement {
    }
    var HTMLTfAppHeaderElement: {
        prototype: HTMLTfAppHeaderElement;
        new (): HTMLTfAppHeaderElement;
    };
    interface HTMLTfButtonElement extends Components.TfButton, HTMLStencilElement {
    }
    var HTMLTfButtonElement: {
        prototype: HTMLTfButtonElement;
        new (): HTMLTfButtonElement;
    };
    interface HTMLTfButtonContainerElement extends Components.TfButtonContainer, HTMLStencilElement {
    }
    var HTMLTfButtonContainerElement: {
        prototype: HTMLTfButtonContainerElement;
        new (): HTMLTfButtonContainerElement;
    };
    interface HTMLTfCardElement extends Components.TfCard, HTMLStencilElement {
    }
    var HTMLTfCardElement: {
        prototype: HTMLTfCardElement;
        new (): HTMLTfCardElement;
    };
    interface HTMLTfCardContainerElement extends Components.TfCardContainer, HTMLStencilElement {
    }
    var HTMLTfCardContainerElement: {
        prototype: HTMLTfCardContainerElement;
        new (): HTMLTfCardContainerElement;
    };
    interface HTMLTfCardContentElement extends Components.TfCardContent, HTMLStencilElement {
    }
    var HTMLTfCardContentElement: {
        prototype: HTMLTfCardContentElement;
        new (): HTMLTfCardContentElement;
    };
    interface HTMLTfCardTitleElement extends Components.TfCardTitle, HTMLStencilElement {
    }
    var HTMLTfCardTitleElement: {
        prototype: HTMLTfCardTitleElement;
        new (): HTMLTfCardTitleElement;
    };
    interface HTMLTfCheckboxElement extends Components.TfCheckbox, HTMLStencilElement {
    }
    var HTMLTfCheckboxElement: {
        prototype: HTMLTfCheckboxElement;
        new (): HTMLTfCheckboxElement;
    };
    interface HTMLTfContainedCardElement extends Components.TfContainedCard, HTMLStencilElement {
    }
    var HTMLTfContainedCardElement: {
        prototype: HTMLTfContainedCardElement;
        new (): HTMLTfContainedCardElement;
    };
    interface HTMLTfDividerElement extends Components.TfDivider, HTMLStencilElement {
    }
    var HTMLTfDividerElement: {
        prototype: HTMLTfDividerElement;
        new (): HTMLTfDividerElement;
    };
    interface HTMLTfDropdownElement extends Components.TfDropdown, HTMLStencilElement {
    }
    var HTMLTfDropdownElement: {
        prototype: HTMLTfDropdownElement;
        new (): HTMLTfDropdownElement;
    };
    interface HTMLTfDropdownLinkElement extends Components.TfDropdownLink, HTMLStencilElement {
    }
    var HTMLTfDropdownLinkElement: {
        prototype: HTMLTfDropdownLinkElement;
        new (): HTMLTfDropdownLinkElement;
    };
    interface HTMLTfDropdownOptionElement extends Components.TfDropdownOption, HTMLStencilElement {
    }
    var HTMLTfDropdownOptionElement: {
        prototype: HTMLTfDropdownOptionElement;
        new (): HTMLTfDropdownOptionElement;
    };
    interface HTMLTfDropdownOptionsElement extends Components.TfDropdownOptions, HTMLStencilElement {
    }
    var HTMLTfDropdownOptionsElement: {
        prototype: HTMLTfDropdownOptionsElement;
        new (): HTMLTfDropdownOptionsElement;
    };
    interface HTMLTfDropdownRenderedOptionElement extends Components.TfDropdownRenderedOption, HTMLStencilElement {
    }
    var HTMLTfDropdownRenderedOptionElement: {
        prototype: HTMLTfDropdownRenderedOptionElement;
        new (): HTMLTfDropdownRenderedOptionElement;
    };
    interface HTMLTfFlexElement extends Components.TfFlex, HTMLStencilElement {
    }
    var HTMLTfFlexElement: {
        prototype: HTMLTfFlexElement;
        new (): HTMLTfFlexElement;
    };
    interface HTMLTfHexagonElement extends Components.TfHexagon, HTMLStencilElement {
    }
    var HTMLTfHexagonElement: {
        prototype: HTMLTfHexagonElement;
        new (): HTMLTfHexagonElement;
    };
    interface HTMLTfHexagonButtonElement extends Components.TfHexagonButton, HTMLStencilElement {
    }
    var HTMLTfHexagonButtonElement: {
        prototype: HTMLTfHexagonButtonElement;
        new (): HTMLTfHexagonButtonElement;
    };
    interface HTMLTfHexagonSvgElement extends Components.TfHexagonSvg, HTMLStencilElement {
    }
    var HTMLTfHexagonSvgElement: {
        prototype: HTMLTfHexagonSvgElement;
        new (): HTMLTfHexagonSvgElement;
    };
    interface HTMLTfIconButtonElement extends Components.TfIconButton, HTMLStencilElement {
    }
    var HTMLTfIconButtonElement: {
        prototype: HTMLTfIconButtonElement;
        new (): HTMLTfIconButtonElement;
    };
    interface HTMLTfIconCheckElement extends Components.TfIconCheck, HTMLStencilElement {
    }
    var HTMLTfIconCheckElement: {
        prototype: HTMLTfIconCheckElement;
        new (): HTMLTfIconCheckElement;
    };
    interface HTMLTfIconChevronDownElement extends Components.TfIconChevronDown, HTMLStencilElement {
    }
    var HTMLTfIconChevronDownElement: {
        prototype: HTMLTfIconChevronDownElement;
        new (): HTMLTfIconChevronDownElement;
    };
    interface HTMLTfIconChevronLeftElement extends Components.TfIconChevronLeft, HTMLStencilElement {
    }
    var HTMLTfIconChevronLeftElement: {
        prototype: HTMLTfIconChevronLeftElement;
        new (): HTMLTfIconChevronLeftElement;
    };
    interface HTMLTfIconChevronRightElement extends Components.TfIconChevronRight, HTMLStencilElement {
    }
    var HTMLTfIconChevronRightElement: {
        prototype: HTMLTfIconChevronRightElement;
        new (): HTMLTfIconChevronRightElement;
    };
    interface HTMLTfIconChevronUpElement extends Components.TfIconChevronUp, HTMLStencilElement {
    }
    var HTMLTfIconChevronUpElement: {
        prototype: HTMLTfIconChevronUpElement;
        new (): HTMLTfIconChevronUpElement;
    };
    interface HTMLTfIconCloseElement extends Components.TfIconClose, HTMLStencilElement {
    }
    var HTMLTfIconCloseElement: {
        prototype: HTMLTfIconCloseElement;
        new (): HTMLTfIconCloseElement;
    };
    interface HTMLTfIconEnvelopeElement extends Components.TfIconEnvelope, HTMLStencilElement {
    }
    var HTMLTfIconEnvelopeElement: {
        prototype: HTMLTfIconEnvelopeElement;
        new (): HTMLTfIconEnvelopeElement;
    };
    interface HTMLTfIconExclamationElement extends Components.TfIconExclamation, HTMLStencilElement {
    }
    var HTMLTfIconExclamationElement: {
        prototype: HTMLTfIconExclamationElement;
        new (): HTMLTfIconExclamationElement;
    };
    interface HTMLTfIconNotificationElement extends Components.TfIconNotification, HTMLStencilElement {
    }
    var HTMLTfIconNotificationElement: {
        prototype: HTMLTfIconNotificationElement;
        new (): HTMLTfIconNotificationElement;
    };
    interface HTMLTfIconSearchElement extends Components.TfIconSearch, HTMLStencilElement {
    }
    var HTMLTfIconSearchElement: {
        prototype: HTMLTfIconSearchElement;
        new (): HTMLTfIconSearchElement;
    };
    interface HTMLTfIconUserElement extends Components.TfIconUser, HTMLStencilElement {
    }
    var HTMLTfIconUserElement: {
        prototype: HTMLTfIconUserElement;
        new (): HTMLTfIconUserElement;
    };
    interface HTMLTfInputElement extends Components.TfInput, HTMLStencilElement {
    }
    var HTMLTfInputElement: {
        prototype: HTMLTfInputElement;
        new (): HTMLTfInputElement;
    };
    interface HTMLTfLeadingIconLabelElement extends Components.TfLeadingIconLabel, HTMLStencilElement {
    }
    var HTMLTfLeadingIconLabelElement: {
        prototype: HTMLTfLeadingIconLabelElement;
        new (): HTMLTfLeadingIconLabelElement;
    };
    interface HTMLTfListElement extends Components.TfList, HTMLStencilElement {
    }
    var HTMLTfListElement: {
        prototype: HTMLTfListElement;
        new (): HTMLTfListElement;
    };
    interface HTMLTfListItemElement extends Components.TfListItem, HTMLStencilElement {
    }
    var HTMLTfListItemElement: {
        prototype: HTMLTfListItemElement;
        new (): HTMLTfListItemElement;
    };
    interface HTMLTfListWrappingCellElement extends Components.TfListWrappingCell, HTMLStencilElement {
    }
    var HTMLTfListWrappingCellElement: {
        prototype: HTMLTfListWrappingCellElement;
        new (): HTMLTfListWrappingCellElement;
    };
    interface HTMLTfListWrappingItemElement extends Components.TfListWrappingItem, HTMLStencilElement {
    }
    var HTMLTfListWrappingItemElement: {
        prototype: HTMLTfListWrappingItemElement;
        new (): HTMLTfListWrappingItemElement;
    };
    interface HTMLTfLmsDelegateNodeElement extends Components.TfLmsDelegateNode, HTMLStencilElement {
    }
    var HTMLTfLmsDelegateNodeElement: {
        prototype: HTMLTfLmsDelegateNodeElement;
        new (): HTMLTfLmsDelegateNodeElement;
    };
    interface HTMLTfLoginFormElement extends Components.TfLoginForm, HTMLStencilElement {
    }
    var HTMLTfLoginFormElement: {
        prototype: HTMLTfLoginFormElement;
        new (): HTMLTfLoginFormElement;
    };
    interface HTMLTfMainContentElement extends Components.TfMainContent, HTMLStencilElement {
    }
    var HTMLTfMainContentElement: {
        prototype: HTMLTfMainContentElement;
        new (): HTMLTfMainContentElement;
    };
    interface HTMLTfMenuBarElement extends Components.TfMenuBar, HTMLStencilElement {
    }
    var HTMLTfMenuBarElement: {
        prototype: HTMLTfMenuBarElement;
        new (): HTMLTfMenuBarElement;
    };
    interface HTMLTfModalElement extends Components.TfModal, HTMLStencilElement {
    }
    var HTMLTfModalElement: {
        prototype: HTMLTfModalElement;
        new (): HTMLTfModalElement;
    };
    interface HTMLTfModal2Element extends Components.TfModal2, HTMLStencilElement {
    }
    var HTMLTfModal2Element: {
        prototype: HTMLTfModal2Element;
        new (): HTMLTfModal2Element;
    };
    interface HTMLTfNodeElement extends Components.TfNode, HTMLStencilElement {
    }
    var HTMLTfNodeElement: {
        prototype: HTMLTfNodeElement;
        new (): HTMLTfNodeElement;
    };
    interface HTMLTfNodeFlexElement extends Components.TfNodeFlex, HTMLStencilElement {
    }
    var HTMLTfNodeFlexElement: {
        prototype: HTMLTfNodeFlexElement;
        new (): HTMLTfNodeFlexElement;
    };
    interface HTMLTfNodeFlexFxrElement extends Components.TfNodeFlexFxr, HTMLStencilElement {
    }
    var HTMLTfNodeFlexFxrElement: {
        prototype: HTMLTfNodeFlexFxrElement;
        new (): HTMLTfNodeFlexFxrElement;
    };
    interface HTMLTfNodeFxlFlexElement extends Components.TfNodeFxlFlex, HTMLStencilElement {
    }
    var HTMLTfNodeFxlFlexElement: {
        prototype: HTMLTfNodeFxlFlexElement;
        new (): HTMLTfNodeFxlFlexElement;
    };
    interface HTMLTfNodeFxlFlexFxrElement extends Components.TfNodeFxlFlexFxr, HTMLStencilElement {
    }
    var HTMLTfNodeFxlFlexFxrElement: {
        prototype: HTMLTfNodeFxlFlexFxrElement;
        new (): HTMLTfNodeFxlFlexFxrElement;
    };
    interface HTMLTfNodeHeaderElement extends Components.TfNodeHeader, HTMLStencilElement {
    }
    var HTMLTfNodeHeaderElement: {
        prototype: HTMLTfNodeHeaderElement;
        new (): HTMLTfNodeHeaderElement;
    };
    interface HTMLTfNodeHeaderTitleElement extends Components.TfNodeHeaderTitle, HTMLStencilElement {
    }
    var HTMLTfNodeHeaderTitleElement: {
        prototype: HTMLTfNodeHeaderTitleElement;
        new (): HTMLTfNodeHeaderTitleElement;
    };
    interface HTMLTfNodeListElement extends Components.TfNodeList, HTMLStencilElement {
    }
    var HTMLTfNodeListElement: {
        prototype: HTMLTfNodeListElement;
        new (): HTMLTfNodeListElement;
    };
    interface HTMLTfNodeSelectMenuElement extends Components.TfNodeSelectMenu, HTMLStencilElement {
    }
    var HTMLTfNodeSelectMenuElement: {
        prototype: HTMLTfNodeSelectMenuElement;
        new (): HTMLTfNodeSelectMenuElement;
    };
    interface HTMLTfNodeStatusBookendElement extends Components.TfNodeStatusBookend, HTMLStencilElement {
    }
    var HTMLTfNodeStatusBookendElement: {
        prototype: HTMLTfNodeStatusBookendElement;
        new (): HTMLTfNodeStatusBookendElement;
    };
    interface HTMLTfNodeTextElement extends Components.TfNodeText, HTMLStencilElement {
    }
    var HTMLTfNodeTextElement: {
        prototype: HTMLTfNodeTextElement;
        new (): HTMLTfNodeTextElement;
    };
    interface HTMLTfPTagElement extends Components.TfPTag, HTMLStencilElement {
    }
    var HTMLTfPTagElement: {
        prototype: HTMLTfPTagElement;
        new (): HTMLTfPTagElement;
    };
    interface HTMLTfRadioElement extends Components.TfRadio, HTMLStencilElement {
    }
    var HTMLTfRadioElement: {
        prototype: HTMLTfRadioElement;
        new (): HTMLTfRadioElement;
    };
    interface HTMLTfRadioGroupElement extends Components.TfRadioGroup, HTMLStencilElement {
    }
    var HTMLTfRadioGroupElement: {
        prototype: HTMLTfRadioGroupElement;
        new (): HTMLTfRadioGroupElement;
    };
    interface HTMLTfSelectElement extends Components.TfSelect, HTMLStencilElement {
    }
    var HTMLTfSelectElement: {
        prototype: HTMLTfSelectElement;
        new (): HTMLTfSelectElement;
    };
    interface HTMLTfSelectOptionElement extends Components.TfSelectOption, HTMLStencilElement {
    }
    var HTMLTfSelectOptionElement: {
        prototype: HTMLTfSelectOptionElement;
        new (): HTMLTfSelectOptionElement;
    };
    interface HTMLTfSideDrawerElement extends Components.TfSideDrawer, HTMLStencilElement {
    }
    var HTMLTfSideDrawerElement: {
        prototype: HTMLTfSideDrawerElement;
        new (): HTMLTfSideDrawerElement;
    };
    interface HTMLTfSideDrawerNavElement extends Components.TfSideDrawerNav, HTMLStencilElement {
    }
    var HTMLTfSideDrawerNavElement: {
        prototype: HTMLTfSideDrawerNavElement;
        new (): HTMLTfSideDrawerNavElement;
    };
    interface HTMLTfSideDrawerNavLinkElement extends Components.TfSideDrawerNavLink, HTMLStencilElement {
    }
    var HTMLTfSideDrawerNavLinkElement: {
        prototype: HTMLTfSideDrawerNavLinkElement;
        new (): HTMLTfSideDrawerNavLinkElement;
    };
    interface HTMLTfSideDrawerSubNavElement extends Components.TfSideDrawerSubNav, HTMLStencilElement {
    }
    var HTMLTfSideDrawerSubNavElement: {
        prototype: HTMLTfSideDrawerSubNavElement;
        new (): HTMLTfSideDrawerSubNavElement;
    };
    interface HTMLTfSideDrawerSubNavLinkElement extends Components.TfSideDrawerSubNavLink, HTMLStencilElement {
    }
    var HTMLTfSideDrawerSubNavLinkElement: {
        prototype: HTMLTfSideDrawerSubNavLinkElement;
        new (): HTMLTfSideDrawerSubNavLinkElement;
    };
    interface HTMLTfSpinnerElement extends Components.TfSpinner, HTMLStencilElement {
    }
    var HTMLTfSpinnerElement: {
        prototype: HTMLTfSpinnerElement;
        new (): HTMLTfSpinnerElement;
    };
    interface HTMLTfStatDataCardElement extends Components.TfStatDataCard, HTMLStencilElement {
    }
    var HTMLTfStatDataCardElement: {
        prototype: HTMLTfStatDataCardElement;
        new (): HTMLTfStatDataCardElement;
    };
    interface HTMLTfStatsPanelElement extends Components.TfStatsPanel, HTMLStencilElement {
    }
    var HTMLTfStatsPanelElement: {
        prototype: HTMLTfStatsPanelElement;
        new (): HTMLTfStatsPanelElement;
    };
    interface HTMLTfStatusElement extends Components.TfStatus, HTMLStencilElement {
    }
    var HTMLTfStatusElement: {
        prototype: HTMLTfStatusElement;
        new (): HTMLTfStatusElement;
    };
    interface HTMLTfTableElement extends Components.TfTable, HTMLStencilElement {
    }
    var HTMLTfTableElement: {
        prototype: HTMLTfTableElement;
        new (): HTMLTfTableElement;
    };
    interface HTMLTfTableCellElement extends Components.TfTableCell, HTMLStencilElement {
    }
    var HTMLTfTableCellElement: {
        prototype: HTMLTfTableCellElement;
        new (): HTMLTfTableCellElement;
    };
    interface HTMLTfTableHeadElement extends Components.TfTableHead, HTMLStencilElement {
    }
    var HTMLTfTableHeadElement: {
        prototype: HTMLTfTableHeadElement;
        new (): HTMLTfTableHeadElement;
    };
    interface HTMLTfTableHeadCellElement extends Components.TfTableHeadCell, HTMLStencilElement {
    }
    var HTMLTfTableHeadCellElement: {
        prototype: HTMLTfTableHeadCellElement;
        new (): HTMLTfTableHeadCellElement;
    };
    interface HTMLTfTableRowElement extends Components.TfTableRow, HTMLStencilElement {
    }
    var HTMLTfTableRowElement: {
        prototype: HTMLTfTableRowElement;
        new (): HTMLTfTableRowElement;
    };
    interface HTMLTfTextareaElement extends Components.TfTextarea, HTMLStencilElement {
    }
    var HTMLTfTextareaElement: {
        prototype: HTMLTfTextareaElement;
        new (): HTMLTfTextareaElement;
    };
    interface HTMLTfUserElement extends Components.TfUser, HTMLStencilElement {
    }
    var HTMLTfUserElement: {
        prototype: HTMLTfUserElement;
        new (): HTMLTfUserElement;
    };
    interface HTMLTfValuePairElement extends Components.TfValuePair, HTMLStencilElement {
    }
    var HTMLTfValuePairElement: {
        prototype: HTMLTfValuePairElement;
        new (): HTMLTfValuePairElement;
    };
    interface HTMLElementTagNameMap {
        "tf-a-tag": HTMLTfATagElement;
        "tf-app-base-header": HTMLTfAppBaseHeaderElement;
        "tf-app-header": HTMLTfAppHeaderElement;
        "tf-button": HTMLTfButtonElement;
        "tf-button-container": HTMLTfButtonContainerElement;
        "tf-card": HTMLTfCardElement;
        "tf-card-container": HTMLTfCardContainerElement;
        "tf-card-content": HTMLTfCardContentElement;
        "tf-card-title": HTMLTfCardTitleElement;
        "tf-checkbox": HTMLTfCheckboxElement;
        "tf-contained-card": HTMLTfContainedCardElement;
        "tf-divider": HTMLTfDividerElement;
        "tf-dropdown": HTMLTfDropdownElement;
        "tf-dropdown-link": HTMLTfDropdownLinkElement;
        "tf-dropdown-option": HTMLTfDropdownOptionElement;
        "tf-dropdown-options": HTMLTfDropdownOptionsElement;
        "tf-dropdown-rendered-option": HTMLTfDropdownRenderedOptionElement;
        "tf-flex": HTMLTfFlexElement;
        "tf-hexagon": HTMLTfHexagonElement;
        "tf-hexagon-button": HTMLTfHexagonButtonElement;
        "tf-hexagon-svg": HTMLTfHexagonSvgElement;
        "tf-icon-button": HTMLTfIconButtonElement;
        "tf-icon-check": HTMLTfIconCheckElement;
        "tf-icon-chevron-down": HTMLTfIconChevronDownElement;
        "tf-icon-chevron-left": HTMLTfIconChevronLeftElement;
        "tf-icon-chevron-right": HTMLTfIconChevronRightElement;
        "tf-icon-chevron-up": HTMLTfIconChevronUpElement;
        "tf-icon-close": HTMLTfIconCloseElement;
        "tf-icon-envelope": HTMLTfIconEnvelopeElement;
        "tf-icon-exclamation": HTMLTfIconExclamationElement;
        "tf-icon-notification": HTMLTfIconNotificationElement;
        "tf-icon-search": HTMLTfIconSearchElement;
        "tf-icon-user": HTMLTfIconUserElement;
        "tf-input": HTMLTfInputElement;
        "tf-leading-icon-label": HTMLTfLeadingIconLabelElement;
        "tf-list": HTMLTfListElement;
        "tf-list-item": HTMLTfListItemElement;
        "tf-list-wrapping-cell": HTMLTfListWrappingCellElement;
        "tf-list-wrapping-item": HTMLTfListWrappingItemElement;
        "tf-lms-delegate-node": HTMLTfLmsDelegateNodeElement;
        "tf-login-form": HTMLTfLoginFormElement;
        "tf-main-content": HTMLTfMainContentElement;
        "tf-menu-bar": HTMLTfMenuBarElement;
        "tf-modal": HTMLTfModalElement;
        "tf-modal-2": HTMLTfModal2Element;
        "tf-node": HTMLTfNodeElement;
        "tf-node-flex": HTMLTfNodeFlexElement;
        "tf-node-flex-fxr": HTMLTfNodeFlexFxrElement;
        "tf-node-fxl-flex": HTMLTfNodeFxlFlexElement;
        "tf-node-fxl-flex-fxr": HTMLTfNodeFxlFlexFxrElement;
        "tf-node-header": HTMLTfNodeHeaderElement;
        "tf-node-header-title": HTMLTfNodeHeaderTitleElement;
        "tf-node-list": HTMLTfNodeListElement;
        "tf-node-select-menu": HTMLTfNodeSelectMenuElement;
        "tf-node-status-bookend": HTMLTfNodeStatusBookendElement;
        "tf-node-text": HTMLTfNodeTextElement;
        "tf-p-tag": HTMLTfPTagElement;
        "tf-radio": HTMLTfRadioElement;
        "tf-radio-group": HTMLTfRadioGroupElement;
        "tf-select": HTMLTfSelectElement;
        "tf-select-option": HTMLTfSelectOptionElement;
        "tf-side-drawer": HTMLTfSideDrawerElement;
        "tf-side-drawer-nav": HTMLTfSideDrawerNavElement;
        "tf-side-drawer-nav-link": HTMLTfSideDrawerNavLinkElement;
        "tf-side-drawer-sub-nav": HTMLTfSideDrawerSubNavElement;
        "tf-side-drawer-sub-nav-link": HTMLTfSideDrawerSubNavLinkElement;
        "tf-spinner": HTMLTfSpinnerElement;
        "tf-stat-data-card": HTMLTfStatDataCardElement;
        "tf-stats-panel": HTMLTfStatsPanelElement;
        "tf-status": HTMLTfStatusElement;
        "tf-table": HTMLTfTableElement;
        "tf-table-cell": HTMLTfTableCellElement;
        "tf-table-head": HTMLTfTableHeadElement;
        "tf-table-head-cell": HTMLTfTableHeadCellElement;
        "tf-table-row": HTMLTfTableRowElement;
        "tf-textarea": HTMLTfTextareaElement;
        "tf-user": HTMLTfUserElement;
        "tf-value-pair": HTMLTfValuePairElement;
    }
}
declare namespace LocalJSX {
    interface TfATag {
        "tagTitle"?: string;
        "url"?: string;
    }
    interface TfAppBaseHeader {
        "appInitials"?: string;
        "appTitle"?: string;
        "clientLogoSource"?: string;
        "onTfAppLogoClicked"?: (event: CustomEvent<string>) => void;
        "showAppLogo"?: boolean;
        "showClientLogo"?: boolean;
    }
    interface TfAppHeader {
        "appInitials"?: string;
        "appTitle"?: string;
        "clientLogoSource"?: string;
        "onTfAppLogoClicked"?: (event: CustomEvent<string>) => void;
    }
    interface TfButton {
        "buttonId"?: string;
        "buttonType"?: string;
        "colour"?: string;
        "disabled"?: boolean;
        "icon"?: any;
        "iconPosition"?: string;
        "size"?: string;
    }
    interface TfButtonContainer {
        "size"?: string;
    }
    interface TfCard {
        "colour"?: string;
    }
    interface TfCardContainer {
        "colour"?: string;
    }
    interface TfCardContent {
    }
    interface TfCardTitle {
        "colour"?: string;
    }
    interface TfCheckbox {
        "checked"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnChecked"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfContainedCard {
        "colour"?: string;
    }
    interface TfDivider {
    }
    interface TfDropdown {
        "colour"?: string;
        "disabled"?: boolean;
        "displayTitle"?: string;
        "dropdownId"?: any;
        "onTfDropdownSelected"?: (event: CustomEvent<any>) => void;
        "position"?: string;
        "size"?: string;
    }
    interface TfDropdownLink {
        "colour"?: string;
        "hrefLink"?: string;
        "hrefTarget"?: string;
        "hrefTitle"?: string;
        "onTfCloseDropdown"?: (event: CustomEvent<string>) => void;
        "onTfDropdownLinkClicked"?: (event: CustomEvent<any>) => void;
        "routerLink"?: string;
    }
    interface TfDropdownOption {
    }
    interface TfDropdownOptions {
    }
    interface TfDropdownRenderedOption {
        "colour"?: string;
        "elementTitle"?: string;
        "onTfDropdownOptionClicked"?: (event: CustomEvent<any>) => void;
        "parent"?: string;
        "value"?: string;
    }
    interface TfFlex {
        "fillHeight"?: boolean;
        "fillWidth"?: boolean;
        "layout"?: string;
        "layoutAlign"?: string;
    }
    interface TfHexagon {
        "asButton"?: boolean;
        "color"?: string;
    }
    interface TfHexagonButton {
        "buttonId"?: string;
        "buttonType"?: string;
        "color"?: string;
        "disabled"?: boolean;
    }
    interface TfHexagonSvg {
        "color"?: string;
        "height"?: number;
        "size"?: string;
        "width"?: number;
    }
    interface TfIconButton {
        "buttonId"?: string;
        "buttonType"?: string;
        "colour"?: string;
        "disabled"?: boolean;
        "icon"?: any;
        "size"?: string;
    }
    interface TfIconCheck {
    }
    interface TfIconChevronDown {
    }
    interface TfIconChevronLeft {
    }
    interface TfIconChevronRight {
    }
    interface TfIconChevronUp {
    }
    interface TfIconClose {
    }
    interface TfIconEnvelope {
    }
    interface TfIconExclamation {
    }
    interface TfIconNotification {
    }
    interface TfIconSearch {
    }
    interface TfIconUser {
    }
    interface TfInput {
        "autoComplete"?: string;
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "icon"?: string;
        "iconPosition"?: string;
        "inputType"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnInput"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfLeadingIconLabel {
        "contentAlign"?: string;
        "order"?: number;
    }
    interface TfList {
    }
    interface TfListItem {
    }
    interface TfListWrappingCell {
        "contentAlign"?: string;
        "order"?: number;
    }
    interface TfListWrappingItem {
    }
    interface TfLmsDelegateNode {
        "courseCode"?: string;
        "courseTitle"?: string;
        "delegateCoursesCount"?: number;
        "delegateDob"?: string;
        "delegateId"?: string;
        "delegateName"?: string;
        "delegateStatus"?: string;
    }
    interface TfLoginForm {
        "apiEndpoint"?: string;
        "apiHeaders"?: any;
        "apiMethod"?: string;
        "bodyPropEmail"?: string;
        "bodyPropPassword"?: string;
        "forgottenUrl"?: string;
        "onTfLoginSuccess"?: (event: CustomEvent<any>) => void;
    }
    interface TfMainContent {
    }
    interface TfMenuBar {
    }
    interface TfModal {
        "cancelColour"?: string;
        "cancelText"?: string;
        "confirmColour"?: string;
        "confirmText"?: string;
        "displayTitle"?: string;
        "headerStyle"?: string;
        "onTfModalClosed"?: (event: CustomEvent<any>) => void;
        "onTfModalConfirmed"?: (event: CustomEvent<any>) => void;
        "opened"?: boolean;
        "showCancel"?: boolean;
        "showClose"?: boolean;
        "showConfirm"?: boolean;
    }
    interface TfModal2 {
        "displayTitle"?: string;
    }
    interface TfNode {
    }
    interface TfNodeFlex {
    }
    interface TfNodeFlexFxr {
        "rWidth"?: string;
    }
    interface TfNodeFxlFlex {
        "lWidth"?: string;
    }
    interface TfNodeFxlFlexFxr {
        "lWidth"?: string;
        "rWidth"?: string;
    }
    interface TfNodeHeader {
    }
    interface TfNodeHeaderTitle {
        "justify"?: string;
    }
    interface TfNodeList {
    }
    interface TfNodeSelectMenu {
    }
    interface TfNodeStatusBookend {
        "color"?: string;
        "showTooltip"?: boolean;
    }
    interface TfNodeText {
        "justify"?: string;
    }
    interface TfPTag {
        "tagTitle"?: string;
        "textAlign"?: string;
        "url"?: string;
    }
    interface TfRadio {
        "checked"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        "groupName"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnChecked"?: (event: CustomEvent<any>) => void;
        "onTfOnRadioSelected"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfRadioGroup {
        "description"?: string;
        "error"?: boolean;
        "errorMessage"?: string;
        "groupName"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnItemSelected"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfSelect {
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "icon"?: string;
        "iconPosition"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnSelect"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface TfSelectOption {
    }
    interface TfSideDrawer {
        "displayTitle"?: string;
        "opened"?: boolean;
    }
    interface TfSideDrawerNav {
    }
    interface TfSideDrawerNavLink {
        "hrefLink"?: string;
        "hrefTitle"?: string;
        "onTfCloseSideDrawer"?: (event: CustomEvent<string>) => void;
        "onTfRouterLinkClicked"?: (event: CustomEvent<any>) => void;
        "routerLink"?: string;
    }
    interface TfSideDrawerSubNav {
    }
    interface TfSideDrawerSubNavLink {
        "hrefLink"?: string;
        "hrefTitle"?: string;
        "onTfCloseSideDrawer"?: (event: CustomEvent<string>) => void;
        "onTfRouterLinkClicked"?: (event: CustomEvent<any>) => void;
        "routerLink"?: string;
    }
    interface TfSpinner {
    }
    interface TfStatDataCard {
        "colour"?: string;
    }
    interface TfStatsPanel {
    }
    interface TfStatus {
        "trafficLightColour"?: string;
    }
    interface TfTable {
    }
    interface TfTableCell {
        "textAlign"?: string;
    }
    interface TfTableHead {
    }
    interface TfTableHeadCell {
    }
    interface TfTableRow {
    }
    interface TfTextarea {
        "autoComplete"?: string;
        "error"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "hint"?: string;
        "icon"?: string;
        "iconPosition"?: string;
        "label"?: string;
        "name"?: string;
        "onTfOnInput"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "rowCount"?: number;
        "value"?: string;
    }
    interface TfUser {
    }
    interface TfValuePair {
    }
    interface IntrinsicElements {
        "tf-a-tag": TfATag;
        "tf-app-base-header": TfAppBaseHeader;
        "tf-app-header": TfAppHeader;
        "tf-button": TfButton;
        "tf-button-container": TfButtonContainer;
        "tf-card": TfCard;
        "tf-card-container": TfCardContainer;
        "tf-card-content": TfCardContent;
        "tf-card-title": TfCardTitle;
        "tf-checkbox": TfCheckbox;
        "tf-contained-card": TfContainedCard;
        "tf-divider": TfDivider;
        "tf-dropdown": TfDropdown;
        "tf-dropdown-link": TfDropdownLink;
        "tf-dropdown-option": TfDropdownOption;
        "tf-dropdown-options": TfDropdownOptions;
        "tf-dropdown-rendered-option": TfDropdownRenderedOption;
        "tf-flex": TfFlex;
        "tf-hexagon": TfHexagon;
        "tf-hexagon-button": TfHexagonButton;
        "tf-hexagon-svg": TfHexagonSvg;
        "tf-icon-button": TfIconButton;
        "tf-icon-check": TfIconCheck;
        "tf-icon-chevron-down": TfIconChevronDown;
        "tf-icon-chevron-left": TfIconChevronLeft;
        "tf-icon-chevron-right": TfIconChevronRight;
        "tf-icon-chevron-up": TfIconChevronUp;
        "tf-icon-close": TfIconClose;
        "tf-icon-envelope": TfIconEnvelope;
        "tf-icon-exclamation": TfIconExclamation;
        "tf-icon-notification": TfIconNotification;
        "tf-icon-search": TfIconSearch;
        "tf-icon-user": TfIconUser;
        "tf-input": TfInput;
        "tf-leading-icon-label": TfLeadingIconLabel;
        "tf-list": TfList;
        "tf-list-item": TfListItem;
        "tf-list-wrapping-cell": TfListWrappingCell;
        "tf-list-wrapping-item": TfListWrappingItem;
        "tf-lms-delegate-node": TfLmsDelegateNode;
        "tf-login-form": TfLoginForm;
        "tf-main-content": TfMainContent;
        "tf-menu-bar": TfMenuBar;
        "tf-modal": TfModal;
        "tf-modal-2": TfModal2;
        "tf-node": TfNode;
        "tf-node-flex": TfNodeFlex;
        "tf-node-flex-fxr": TfNodeFlexFxr;
        "tf-node-fxl-flex": TfNodeFxlFlex;
        "tf-node-fxl-flex-fxr": TfNodeFxlFlexFxr;
        "tf-node-header": TfNodeHeader;
        "tf-node-header-title": TfNodeHeaderTitle;
        "tf-node-list": TfNodeList;
        "tf-node-select-menu": TfNodeSelectMenu;
        "tf-node-status-bookend": TfNodeStatusBookend;
        "tf-node-text": TfNodeText;
        "tf-p-tag": TfPTag;
        "tf-radio": TfRadio;
        "tf-radio-group": TfRadioGroup;
        "tf-select": TfSelect;
        "tf-select-option": TfSelectOption;
        "tf-side-drawer": TfSideDrawer;
        "tf-side-drawer-nav": TfSideDrawerNav;
        "tf-side-drawer-nav-link": TfSideDrawerNavLink;
        "tf-side-drawer-sub-nav": TfSideDrawerSubNav;
        "tf-side-drawer-sub-nav-link": TfSideDrawerSubNavLink;
        "tf-spinner": TfSpinner;
        "tf-stat-data-card": TfStatDataCard;
        "tf-stats-panel": TfStatsPanel;
        "tf-status": TfStatus;
        "tf-table": TfTable;
        "tf-table-cell": TfTableCell;
        "tf-table-head": TfTableHead;
        "tf-table-head-cell": TfTableHeadCell;
        "tf-table-row": TfTableRow;
        "tf-textarea": TfTextarea;
        "tf-user": TfUser;
        "tf-value-pair": TfValuePair;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tf-a-tag": LocalJSX.TfATag & JSXBase.HTMLAttributes<HTMLTfATagElement>;
            "tf-app-base-header": LocalJSX.TfAppBaseHeader & JSXBase.HTMLAttributes<HTMLTfAppBaseHeaderElement>;
            "tf-app-header": LocalJSX.TfAppHeader & JSXBase.HTMLAttributes<HTMLTfAppHeaderElement>;
            "tf-button": LocalJSX.TfButton & JSXBase.HTMLAttributes<HTMLTfButtonElement>;
            "tf-button-container": LocalJSX.TfButtonContainer & JSXBase.HTMLAttributes<HTMLTfButtonContainerElement>;
            "tf-card": LocalJSX.TfCard & JSXBase.HTMLAttributes<HTMLTfCardElement>;
            "tf-card-container": LocalJSX.TfCardContainer & JSXBase.HTMLAttributes<HTMLTfCardContainerElement>;
            "tf-card-content": LocalJSX.TfCardContent & JSXBase.HTMLAttributes<HTMLTfCardContentElement>;
            "tf-card-title": LocalJSX.TfCardTitle & JSXBase.HTMLAttributes<HTMLTfCardTitleElement>;
            "tf-checkbox": LocalJSX.TfCheckbox & JSXBase.HTMLAttributes<HTMLTfCheckboxElement>;
            "tf-contained-card": LocalJSX.TfContainedCard & JSXBase.HTMLAttributes<HTMLTfContainedCardElement>;
            "tf-divider": LocalJSX.TfDivider & JSXBase.HTMLAttributes<HTMLTfDividerElement>;
            "tf-dropdown": LocalJSX.TfDropdown & JSXBase.HTMLAttributes<HTMLTfDropdownElement>;
            "tf-dropdown-link": LocalJSX.TfDropdownLink & JSXBase.HTMLAttributes<HTMLTfDropdownLinkElement>;
            "tf-dropdown-option": LocalJSX.TfDropdownOption & JSXBase.HTMLAttributes<HTMLTfDropdownOptionElement>;
            "tf-dropdown-options": LocalJSX.TfDropdownOptions & JSXBase.HTMLAttributes<HTMLTfDropdownOptionsElement>;
            "tf-dropdown-rendered-option": LocalJSX.TfDropdownRenderedOption & JSXBase.HTMLAttributes<HTMLTfDropdownRenderedOptionElement>;
            "tf-flex": LocalJSX.TfFlex & JSXBase.HTMLAttributes<HTMLTfFlexElement>;
            "tf-hexagon": LocalJSX.TfHexagon & JSXBase.HTMLAttributes<HTMLTfHexagonElement>;
            "tf-hexagon-button": LocalJSX.TfHexagonButton & JSXBase.HTMLAttributes<HTMLTfHexagonButtonElement>;
            "tf-hexagon-svg": LocalJSX.TfHexagonSvg & JSXBase.HTMLAttributes<HTMLTfHexagonSvgElement>;
            "tf-icon-button": LocalJSX.TfIconButton & JSXBase.HTMLAttributes<HTMLTfIconButtonElement>;
            "tf-icon-check": LocalJSX.TfIconCheck & JSXBase.HTMLAttributes<HTMLTfIconCheckElement>;
            "tf-icon-chevron-down": LocalJSX.TfIconChevronDown & JSXBase.HTMLAttributes<HTMLTfIconChevronDownElement>;
            "tf-icon-chevron-left": LocalJSX.TfIconChevronLeft & JSXBase.HTMLAttributes<HTMLTfIconChevronLeftElement>;
            "tf-icon-chevron-right": LocalJSX.TfIconChevronRight & JSXBase.HTMLAttributes<HTMLTfIconChevronRightElement>;
            "tf-icon-chevron-up": LocalJSX.TfIconChevronUp & JSXBase.HTMLAttributes<HTMLTfIconChevronUpElement>;
            "tf-icon-close": LocalJSX.TfIconClose & JSXBase.HTMLAttributes<HTMLTfIconCloseElement>;
            "tf-icon-envelope": LocalJSX.TfIconEnvelope & JSXBase.HTMLAttributes<HTMLTfIconEnvelopeElement>;
            "tf-icon-exclamation": LocalJSX.TfIconExclamation & JSXBase.HTMLAttributes<HTMLTfIconExclamationElement>;
            "tf-icon-notification": LocalJSX.TfIconNotification & JSXBase.HTMLAttributes<HTMLTfIconNotificationElement>;
            "tf-icon-search": LocalJSX.TfIconSearch & JSXBase.HTMLAttributes<HTMLTfIconSearchElement>;
            "tf-icon-user": LocalJSX.TfIconUser & JSXBase.HTMLAttributes<HTMLTfIconUserElement>;
            "tf-input": LocalJSX.TfInput & JSXBase.HTMLAttributes<HTMLTfInputElement>;
            "tf-leading-icon-label": LocalJSX.TfLeadingIconLabel & JSXBase.HTMLAttributes<HTMLTfLeadingIconLabelElement>;
            "tf-list": LocalJSX.TfList & JSXBase.HTMLAttributes<HTMLTfListElement>;
            "tf-list-item": LocalJSX.TfListItem & JSXBase.HTMLAttributes<HTMLTfListItemElement>;
            "tf-list-wrapping-cell": LocalJSX.TfListWrappingCell & JSXBase.HTMLAttributes<HTMLTfListWrappingCellElement>;
            "tf-list-wrapping-item": LocalJSX.TfListWrappingItem & JSXBase.HTMLAttributes<HTMLTfListWrappingItemElement>;
            "tf-lms-delegate-node": LocalJSX.TfLmsDelegateNode & JSXBase.HTMLAttributes<HTMLTfLmsDelegateNodeElement>;
            "tf-login-form": LocalJSX.TfLoginForm & JSXBase.HTMLAttributes<HTMLTfLoginFormElement>;
            "tf-main-content": LocalJSX.TfMainContent & JSXBase.HTMLAttributes<HTMLTfMainContentElement>;
            "tf-menu-bar": LocalJSX.TfMenuBar & JSXBase.HTMLAttributes<HTMLTfMenuBarElement>;
            "tf-modal": LocalJSX.TfModal & JSXBase.HTMLAttributes<HTMLTfModalElement>;
            "tf-modal-2": LocalJSX.TfModal2 & JSXBase.HTMLAttributes<HTMLTfModal2Element>;
            "tf-node": LocalJSX.TfNode & JSXBase.HTMLAttributes<HTMLTfNodeElement>;
            "tf-node-flex": LocalJSX.TfNodeFlex & JSXBase.HTMLAttributes<HTMLTfNodeFlexElement>;
            "tf-node-flex-fxr": LocalJSX.TfNodeFlexFxr & JSXBase.HTMLAttributes<HTMLTfNodeFlexFxrElement>;
            "tf-node-fxl-flex": LocalJSX.TfNodeFxlFlex & JSXBase.HTMLAttributes<HTMLTfNodeFxlFlexElement>;
            "tf-node-fxl-flex-fxr": LocalJSX.TfNodeFxlFlexFxr & JSXBase.HTMLAttributes<HTMLTfNodeFxlFlexFxrElement>;
            "tf-node-header": LocalJSX.TfNodeHeader & JSXBase.HTMLAttributes<HTMLTfNodeHeaderElement>;
            "tf-node-header-title": LocalJSX.TfNodeHeaderTitle & JSXBase.HTMLAttributes<HTMLTfNodeHeaderTitleElement>;
            "tf-node-list": LocalJSX.TfNodeList & JSXBase.HTMLAttributes<HTMLTfNodeListElement>;
            "tf-node-select-menu": LocalJSX.TfNodeSelectMenu & JSXBase.HTMLAttributes<HTMLTfNodeSelectMenuElement>;
            "tf-node-status-bookend": LocalJSX.TfNodeStatusBookend & JSXBase.HTMLAttributes<HTMLTfNodeStatusBookendElement>;
            "tf-node-text": LocalJSX.TfNodeText & JSXBase.HTMLAttributes<HTMLTfNodeTextElement>;
            "tf-p-tag": LocalJSX.TfPTag & JSXBase.HTMLAttributes<HTMLTfPTagElement>;
            "tf-radio": LocalJSX.TfRadio & JSXBase.HTMLAttributes<HTMLTfRadioElement>;
            "tf-radio-group": LocalJSX.TfRadioGroup & JSXBase.HTMLAttributes<HTMLTfRadioGroupElement>;
            "tf-select": LocalJSX.TfSelect & JSXBase.HTMLAttributes<HTMLTfSelectElement>;
            "tf-select-option": LocalJSX.TfSelectOption & JSXBase.HTMLAttributes<HTMLTfSelectOptionElement>;
            "tf-side-drawer": LocalJSX.TfSideDrawer & JSXBase.HTMLAttributes<HTMLTfSideDrawerElement>;
            "tf-side-drawer-nav": LocalJSX.TfSideDrawerNav & JSXBase.HTMLAttributes<HTMLTfSideDrawerNavElement>;
            "tf-side-drawer-nav-link": LocalJSX.TfSideDrawerNavLink & JSXBase.HTMLAttributes<HTMLTfSideDrawerNavLinkElement>;
            "tf-side-drawer-sub-nav": LocalJSX.TfSideDrawerSubNav & JSXBase.HTMLAttributes<HTMLTfSideDrawerSubNavElement>;
            "tf-side-drawer-sub-nav-link": LocalJSX.TfSideDrawerSubNavLink & JSXBase.HTMLAttributes<HTMLTfSideDrawerSubNavLinkElement>;
            "tf-spinner": LocalJSX.TfSpinner & JSXBase.HTMLAttributes<HTMLTfSpinnerElement>;
            "tf-stat-data-card": LocalJSX.TfStatDataCard & JSXBase.HTMLAttributes<HTMLTfStatDataCardElement>;
            "tf-stats-panel": LocalJSX.TfStatsPanel & JSXBase.HTMLAttributes<HTMLTfStatsPanelElement>;
            "tf-status": LocalJSX.TfStatus & JSXBase.HTMLAttributes<HTMLTfStatusElement>;
            "tf-table": LocalJSX.TfTable & JSXBase.HTMLAttributes<HTMLTfTableElement>;
            "tf-table-cell": LocalJSX.TfTableCell & JSXBase.HTMLAttributes<HTMLTfTableCellElement>;
            "tf-table-head": LocalJSX.TfTableHead & JSXBase.HTMLAttributes<HTMLTfTableHeadElement>;
            "tf-table-head-cell": LocalJSX.TfTableHeadCell & JSXBase.HTMLAttributes<HTMLTfTableHeadCellElement>;
            "tf-table-row": LocalJSX.TfTableRow & JSXBase.HTMLAttributes<HTMLTfTableRowElement>;
            "tf-textarea": LocalJSX.TfTextarea & JSXBase.HTMLAttributes<HTMLTfTextareaElement>;
            "tf-user": LocalJSX.TfUser & JSXBase.HTMLAttributes<HTMLTfUserElement>;
            "tf-value-pair": LocalJSX.TfValuePair & JSXBase.HTMLAttributes<HTMLTfValuePairElement>;
        }
    }
}
